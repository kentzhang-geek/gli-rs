/* automatically generated by rust-bindgen */

use crate::ffi::root::gli::texture2d;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl<T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub mod gli {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type byte = root::glm::uint8;
        pub type extent1d = root::glm::ivec1;
        pub type extent2d = root::glm::ivec2;
        pub type extent3d = root::glm::ivec3;
        pub const target_TARGET_1D: root::gli::target = 0;
        pub const target_TARGET_FIRST: root::gli::target = 0;
        pub const target_TARGET_1D_ARRAY: root::gli::target = 1;
        pub const target_TARGET_2D: root::gli::target = 2;
        pub const target_TARGET_2D_ARRAY: root::gli::target = 3;
        pub const target_TARGET_3D: root::gli::target = 4;
        pub const target_TARGET_RECT: root::gli::target = 5;
        pub const target_TARGET_RECT_ARRAY: root::gli::target = 6;
        pub const target_TARGET_CUBE: root::gli::target = 7;
        pub const target_TARGET_CUBE_ARRAY: root::gli::target = 8;
        pub const target_TARGET_LAST: root::gli::target = 8;
        #[doc = " Texture target: type/shape of the texture storage_linear"]
        pub type target = u32;
        pub const format_FORMAT_UNDEFINED: root::gli::format = 0;
        pub const format_FORMAT_RG4_UNORM_PACK8: root::gli::format = 1;
        pub const format_FORMAT_FIRST: root::gli::format = 1;
        pub const format_FORMAT_RGBA4_UNORM_PACK16: root::gli::format = 2;
        pub const format_FORMAT_BGRA4_UNORM_PACK16: root::gli::format = 3;
        pub const format_FORMAT_R5G6B5_UNORM_PACK16: root::gli::format = 4;
        pub const format_FORMAT_B5G6R5_UNORM_PACK16: root::gli::format = 5;
        pub const format_FORMAT_RGB5A1_UNORM_PACK16: root::gli::format = 6;
        pub const format_FORMAT_BGR5A1_UNORM_PACK16: root::gli::format = 7;
        pub const format_FORMAT_A1RGB5_UNORM_PACK16: root::gli::format = 8;
        pub const format_FORMAT_R8_UNORM_PACK8: root::gli::format = 9;
        pub const format_FORMAT_R8_SNORM_PACK8: root::gli::format = 10;
        pub const format_FORMAT_R8_USCALED_PACK8: root::gli::format = 11;
        pub const format_FORMAT_R8_SSCALED_PACK8: root::gli::format = 12;
        pub const format_FORMAT_R8_UINT_PACK8: root::gli::format = 13;
        pub const format_FORMAT_R8_SINT_PACK8: root::gli::format = 14;
        pub const format_FORMAT_R8_SRGB_PACK8: root::gli::format = 15;
        pub const format_FORMAT_RG8_UNORM_PACK8: root::gli::format = 16;
        pub const format_FORMAT_RG8_SNORM_PACK8: root::gli::format = 17;
        pub const format_FORMAT_RG8_USCALED_PACK8: root::gli::format = 18;
        pub const format_FORMAT_RG8_SSCALED_PACK8: root::gli::format = 19;
        pub const format_FORMAT_RG8_UINT_PACK8: root::gli::format = 20;
        pub const format_FORMAT_RG8_SINT_PACK8: root::gli::format = 21;
        pub const format_FORMAT_RG8_SRGB_PACK8: root::gli::format = 22;
        pub const format_FORMAT_RGB8_UNORM_PACK8: root::gli::format = 23;
        pub const format_FORMAT_RGB8_SNORM_PACK8: root::gli::format = 24;
        pub const format_FORMAT_RGB8_USCALED_PACK8: root::gli::format = 25;
        pub const format_FORMAT_RGB8_SSCALED_PACK8: root::gli::format = 26;
        pub const format_FORMAT_RGB8_UINT_PACK8: root::gli::format = 27;
        pub const format_FORMAT_RGB8_SINT_PACK8: root::gli::format = 28;
        pub const format_FORMAT_RGB8_SRGB_PACK8: root::gli::format = 29;
        pub const format_FORMAT_BGR8_UNORM_PACK8: root::gli::format = 30;
        pub const format_FORMAT_BGR8_SNORM_PACK8: root::gli::format = 31;
        pub const format_FORMAT_BGR8_USCALED_PACK8: root::gli::format = 32;
        pub const format_FORMAT_BGR8_SSCALED_PACK8: root::gli::format = 33;
        pub const format_FORMAT_BGR8_UINT_PACK8: root::gli::format = 34;
        pub const format_FORMAT_BGR8_SINT_PACK8: root::gli::format = 35;
        pub const format_FORMAT_BGR8_SRGB_PACK8: root::gli::format = 36;
        pub const format_FORMAT_RGBA8_UNORM_PACK8: root::gli::format = 37;
        pub const format_FORMAT_RGBA8_SNORM_PACK8: root::gli::format = 38;
        pub const format_FORMAT_RGBA8_USCALED_PACK8: root::gli::format = 39;
        pub const format_FORMAT_RGBA8_SSCALED_PACK8: root::gli::format = 40;
        pub const format_FORMAT_RGBA8_UINT_PACK8: root::gli::format = 41;
        pub const format_FORMAT_RGBA8_SINT_PACK8: root::gli::format = 42;
        pub const format_FORMAT_RGBA8_SRGB_PACK8: root::gli::format = 43;
        pub const format_FORMAT_BGRA8_UNORM_PACK8: root::gli::format = 44;
        pub const format_FORMAT_BGRA8_SNORM_PACK8: root::gli::format = 45;
        pub const format_FORMAT_BGRA8_USCALED_PACK8: root::gli::format = 46;
        pub const format_FORMAT_BGRA8_SSCALED_PACK8: root::gli::format = 47;
        pub const format_FORMAT_BGRA8_UINT_PACK8: root::gli::format = 48;
        pub const format_FORMAT_BGRA8_SINT_PACK8: root::gli::format = 49;
        pub const format_FORMAT_BGRA8_SRGB_PACK8: root::gli::format = 50;
        pub const format_FORMAT_RGBA8_UNORM_PACK32: root::gli::format = 51;
        pub const format_FORMAT_RGBA8_SNORM_PACK32: root::gli::format = 52;
        pub const format_FORMAT_RGBA8_USCALED_PACK32: root::gli::format = 53;
        pub const format_FORMAT_RGBA8_SSCALED_PACK32: root::gli::format = 54;
        pub const format_FORMAT_RGBA8_UINT_PACK32: root::gli::format = 55;
        pub const format_FORMAT_RGBA8_SINT_PACK32: root::gli::format = 56;
        pub const format_FORMAT_RGBA8_SRGB_PACK32: root::gli::format = 57;
        pub const format_FORMAT_RGB10A2_UNORM_PACK32: root::gli::format = 58;
        pub const format_FORMAT_RGB10A2_SNORM_PACK32: root::gli::format = 59;
        pub const format_FORMAT_RGB10A2_USCALED_PACK32: root::gli::format = 60;
        pub const format_FORMAT_RGB10A2_SSCALED_PACK32: root::gli::format = 61;
        pub const format_FORMAT_RGB10A2_UINT_PACK32: root::gli::format = 62;
        pub const format_FORMAT_RGB10A2_SINT_PACK32: root::gli::format = 63;
        pub const format_FORMAT_BGR10A2_UNORM_PACK32: root::gli::format = 64;
        pub const format_FORMAT_BGR10A2_SNORM_PACK32: root::gli::format = 65;
        pub const format_FORMAT_BGR10A2_USCALED_PACK32: root::gli::format = 66;
        pub const format_FORMAT_BGR10A2_SSCALED_PACK32: root::gli::format = 67;
        pub const format_FORMAT_BGR10A2_UINT_PACK32: root::gli::format = 68;
        pub const format_FORMAT_BGR10A2_SINT_PACK32: root::gli::format = 69;
        pub const format_FORMAT_R16_UNORM_PACK16: root::gli::format = 70;
        pub const format_FORMAT_R16_SNORM_PACK16: root::gli::format = 71;
        pub const format_FORMAT_R16_USCALED_PACK16: root::gli::format = 72;
        pub const format_FORMAT_R16_SSCALED_PACK16: root::gli::format = 73;
        pub const format_FORMAT_R16_UINT_PACK16: root::gli::format = 74;
        pub const format_FORMAT_R16_SINT_PACK16: root::gli::format = 75;
        pub const format_FORMAT_R16_SFLOAT_PACK16: root::gli::format = 76;
        pub const format_FORMAT_RG16_UNORM_PACK16: root::gli::format = 77;
        pub const format_FORMAT_RG16_SNORM_PACK16: root::gli::format = 78;
        pub const format_FORMAT_RG16_USCALED_PACK16: root::gli::format = 79;
        pub const format_FORMAT_RG16_SSCALED_PACK16: root::gli::format = 80;
        pub const format_FORMAT_RG16_UINT_PACK16: root::gli::format = 81;
        pub const format_FORMAT_RG16_SINT_PACK16: root::gli::format = 82;
        pub const format_FORMAT_RG16_SFLOAT_PACK16: root::gli::format = 83;
        pub const format_FORMAT_RGB16_UNORM_PACK16: root::gli::format = 84;
        pub const format_FORMAT_RGB16_SNORM_PACK16: root::gli::format = 85;
        pub const format_FORMAT_RGB16_USCALED_PACK16: root::gli::format = 86;
        pub const format_FORMAT_RGB16_SSCALED_PACK16: root::gli::format = 87;
        pub const format_FORMAT_RGB16_UINT_PACK16: root::gli::format = 88;
        pub const format_FORMAT_RGB16_SINT_PACK16: root::gli::format = 89;
        pub const format_FORMAT_RGB16_SFLOAT_PACK16: root::gli::format = 90;
        pub const format_FORMAT_RGBA16_UNORM_PACK16: root::gli::format = 91;
        pub const format_FORMAT_RGBA16_SNORM_PACK16: root::gli::format = 92;
        pub const format_FORMAT_RGBA16_USCALED_PACK16: root::gli::format = 93;
        pub const format_FORMAT_RGBA16_SSCALED_PACK16: root::gli::format = 94;
        pub const format_FORMAT_RGBA16_UINT_PACK16: root::gli::format = 95;
        pub const format_FORMAT_RGBA16_SINT_PACK16: root::gli::format = 96;
        pub const format_FORMAT_RGBA16_SFLOAT_PACK16: root::gli::format = 97;
        pub const format_FORMAT_R32_UINT_PACK32: root::gli::format = 98;
        pub const format_FORMAT_R32_SINT_PACK32: root::gli::format = 99;
        pub const format_FORMAT_R32_SFLOAT_PACK32: root::gli::format = 100;
        pub const format_FORMAT_RG32_UINT_PACK32: root::gli::format = 101;
        pub const format_FORMAT_RG32_SINT_PACK32: root::gli::format = 102;
        pub const format_FORMAT_RG32_SFLOAT_PACK32: root::gli::format = 103;
        pub const format_FORMAT_RGB32_UINT_PACK32: root::gli::format = 104;
        pub const format_FORMAT_RGB32_SINT_PACK32: root::gli::format = 105;
        pub const format_FORMAT_RGB32_SFLOAT_PACK32: root::gli::format = 106;
        pub const format_FORMAT_RGBA32_UINT_PACK32: root::gli::format = 107;
        pub const format_FORMAT_RGBA32_SINT_PACK32: root::gli::format = 108;
        pub const format_FORMAT_RGBA32_SFLOAT_PACK32: root::gli::format = 109;
        pub const format_FORMAT_R64_UINT_PACK64: root::gli::format = 110;
        pub const format_FORMAT_R64_SINT_PACK64: root::gli::format = 111;
        pub const format_FORMAT_R64_SFLOAT_PACK64: root::gli::format = 112;
        pub const format_FORMAT_RG64_UINT_PACK64: root::gli::format = 113;
        pub const format_FORMAT_RG64_SINT_PACK64: root::gli::format = 114;
        pub const format_FORMAT_RG64_SFLOAT_PACK64: root::gli::format = 115;
        pub const format_FORMAT_RGB64_UINT_PACK64: root::gli::format = 116;
        pub const format_FORMAT_RGB64_SINT_PACK64: root::gli::format = 117;
        pub const format_FORMAT_RGB64_SFLOAT_PACK64: root::gli::format = 118;
        pub const format_FORMAT_RGBA64_UINT_PACK64: root::gli::format = 119;
        pub const format_FORMAT_RGBA64_SINT_PACK64: root::gli::format = 120;
        pub const format_FORMAT_RGBA64_SFLOAT_PACK64: root::gli::format = 121;
        pub const format_FORMAT_RG11B10_UFLOAT_PACK32: root::gli::format = 122;
        pub const format_FORMAT_RGB9E5_UFLOAT_PACK32: root::gli::format = 123;
        pub const format_FORMAT_D16_UNORM_PACK16: root::gli::format = 124;
        pub const format_FORMAT_D24_UNORM_PACK32: root::gli::format = 125;
        pub const format_FORMAT_D32_SFLOAT_PACK32: root::gli::format = 126;
        pub const format_FORMAT_S8_UINT_PACK8: root::gli::format = 127;
        pub const format_FORMAT_D16_UNORM_S8_UINT_PACK32: root::gli::format = 128;
        pub const format_FORMAT_D24_UNORM_S8_UINT_PACK32: root::gli::format = 129;
        pub const format_FORMAT_D32_SFLOAT_S8_UINT_PACK64: root::gli::format = 130;
        pub const format_FORMAT_RGB_DXT1_UNORM_BLOCK8: root::gli::format = 131;
        pub const format_FORMAT_RGB_DXT1_SRGB_BLOCK8: root::gli::format = 132;
        pub const format_FORMAT_RGBA_DXT1_UNORM_BLOCK8: root::gli::format = 133;
        pub const format_FORMAT_RGBA_DXT1_SRGB_BLOCK8: root::gli::format = 134;
        pub const format_FORMAT_RGBA_DXT3_UNORM_BLOCK16: root::gli::format = 135;
        pub const format_FORMAT_RGBA_DXT3_SRGB_BLOCK16: root::gli::format = 136;
        pub const format_FORMAT_RGBA_DXT5_UNORM_BLOCK16: root::gli::format = 137;
        pub const format_FORMAT_RGBA_DXT5_SRGB_BLOCK16: root::gli::format = 138;
        pub const format_FORMAT_R_ATI1N_UNORM_BLOCK8: root::gli::format = 139;
        pub const format_FORMAT_R_ATI1N_SNORM_BLOCK8: root::gli::format = 140;
        pub const format_FORMAT_RG_ATI2N_UNORM_BLOCK16: root::gli::format = 141;
        pub const format_FORMAT_RG_ATI2N_SNORM_BLOCK16: root::gli::format = 142;
        pub const format_FORMAT_RGB_BP_UFLOAT_BLOCK16: root::gli::format = 143;
        pub const format_FORMAT_RGB_BP_SFLOAT_BLOCK16: root::gli::format = 144;
        pub const format_FORMAT_RGBA_BP_UNORM_BLOCK16: root::gli::format = 145;
        pub const format_FORMAT_RGBA_BP_SRGB_BLOCK16: root::gli::format = 146;
        pub const format_FORMAT_RGB_ETC2_UNORM_BLOCK8: root::gli::format = 147;
        pub const format_FORMAT_RGB_ETC2_SRGB_BLOCK8: root::gli::format = 148;
        pub const format_FORMAT_RGBA_ETC2_UNORM_BLOCK8: root::gli::format = 149;
        pub const format_FORMAT_RGBA_ETC2_SRGB_BLOCK8: root::gli::format = 150;
        pub const format_FORMAT_RGBA_ETC2_UNORM_BLOCK16: root::gli::format = 151;
        pub const format_FORMAT_RGBA_ETC2_SRGB_BLOCK16: root::gli::format = 152;
        pub const format_FORMAT_R_EAC_UNORM_BLOCK8: root::gli::format = 153;
        pub const format_FORMAT_R_EAC_SNORM_BLOCK8: root::gli::format = 154;
        pub const format_FORMAT_RG_EAC_UNORM_BLOCK16: root::gli::format = 155;
        pub const format_FORMAT_RG_EAC_SNORM_BLOCK16: root::gli::format = 156;
        pub const format_FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16: root::gli::format = 157;
        pub const format_FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16: root::gli::format = 158;
        pub const format_FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16: root::gli::format = 159;
        pub const format_FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16: root::gli::format = 160;
        pub const format_FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16: root::gli::format = 161;
        pub const format_FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16: root::gli::format = 162;
        pub const format_FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16: root::gli::format = 163;
        pub const format_FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16: root::gli::format = 164;
        pub const format_FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16: root::gli::format = 165;
        pub const format_FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16: root::gli::format = 166;
        pub const format_FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16: root::gli::format = 167;
        pub const format_FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16: root::gli::format = 168;
        pub const format_FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16: root::gli::format = 169;
        pub const format_FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16: root::gli::format = 170;
        pub const format_FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16: root::gli::format = 171;
        pub const format_FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16: root::gli::format = 172;
        pub const format_FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16: root::gli::format = 173;
        pub const format_FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16: root::gli::format = 174;
        pub const format_FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16: root::gli::format = 175;
        pub const format_FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16: root::gli::format = 176;
        pub const format_FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16: root::gli::format = 177;
        pub const format_FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16: root::gli::format = 178;
        pub const format_FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16: root::gli::format = 179;
        pub const format_FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16: root::gli::format = 180;
        pub const format_FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16: root::gli::format = 181;
        pub const format_FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16: root::gli::format = 182;
        pub const format_FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16: root::gli::format = 183;
        pub const format_FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16: root::gli::format = 184;
        pub const format_FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32: root::gli::format = 185;
        pub const format_FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32: root::gli::format = 186;
        pub const format_FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32: root::gli::format = 187;
        pub const format_FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32: root::gli::format = 188;
        pub const format_FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32: root::gli::format = 189;
        pub const format_FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32: root::gli::format = 190;
        pub const format_FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32: root::gli::format = 191;
        pub const format_FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32: root::gli::format = 192;
        pub const format_FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8: root::gli::format = 193;
        pub const format_FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8: root::gli::format = 194;
        pub const format_FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8: root::gli::format = 195;
        pub const format_FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8: root::gli::format = 196;
        pub const format_FORMAT_RGB_ETC_UNORM_BLOCK8: root::gli::format = 197;
        pub const format_FORMAT_RGB_ATC_UNORM_BLOCK8: root::gli::format = 198;
        pub const format_FORMAT_RGBA_ATCA_UNORM_BLOCK16: root::gli::format = 199;
        pub const format_FORMAT_RGBA_ATCI_UNORM_BLOCK16: root::gli::format = 200;
        pub const format_FORMAT_L8_UNORM_PACK8: root::gli::format = 201;
        pub const format_FORMAT_A8_UNORM_PACK8: root::gli::format = 202;
        pub const format_FORMAT_LA8_UNORM_PACK8: root::gli::format = 203;
        pub const format_FORMAT_L16_UNORM_PACK16: root::gli::format = 204;
        pub const format_FORMAT_A16_UNORM_PACK16: root::gli::format = 205;
        pub const format_FORMAT_LA16_UNORM_PACK16: root::gli::format = 206;
        pub const format_FORMAT_BGR8_UNORM_PACK32: root::gli::format = 207;
        pub const format_FORMAT_BGR8_SRGB_PACK32: root::gli::format = 208;
        pub const format_FORMAT_RG3B2_UNORM_PACK8: root::gli::format = 209;
        pub const format_FORMAT_LAST: root::gli::format = 209;
        #[doc = " Texture data format"]
        pub type format = u32;
        pub const swizzle_SWIZZLE_RED: root::gli::swizzle = 0;
        pub const swizzle_SWIZZLE_FIRST: root::gli::swizzle = 0;
        pub const swizzle_SWIZZLE_CHANNEL_FIRST: root::gli::swizzle = 0;
        pub const swizzle_SWIZZLE_GREEN: root::gli::swizzle = 1;
        pub const swizzle_SWIZZLE_BLUE: root::gli::swizzle = 2;
        pub const swizzle_SWIZZLE_ALPHA: root::gli::swizzle = 3;
        pub const swizzle_SWIZZLE_CHANNEL_LAST: root::gli::swizzle = 3;
        pub const swizzle_SWIZZLE_ZERO: root::gli::swizzle = 4;
        pub const swizzle_SWIZZLE_ONE: root::gli::swizzle = 5;
        pub const swizzle_SWIZZLE_LAST: root::gli::swizzle = 5;
        #[doc = " Represent the source of a channel"]
        pub type swizzle = u32;
        #[repr(transparent)]
        pub struct swizzles(pub [u32; 4usize]);
        impl ::std::ops::Deref for swizzles {
            type Target = [u32; 4usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for swizzles {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        extern "C" {
            #[doc = " Evaluate whether a format is compressed"]
            pub fn is_compressed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format is compressed with an S3TC algorithm."]
            pub fn is_s3tc_compressed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format stores sRGB color space values"]
            pub fn is_srgb(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format is unsigned"]
            pub fn is_unsigned(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format is signed"]
            pub fn is_signed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an integer format"]
            pub fn is_integer(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is a signed integer format"]
            pub fn is_signed_integer(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an unsigned integer format"]
            pub fn is_unsigned_integer(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an float format"]
            pub fn is_float(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is normalized"]
            pub fn is_normalized(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an unsigned normalized format"]
            pub fn is_unorm(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is a signed normalized format"]
            pub fn is_snorm(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is packed"]
            pub fn is_packed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is a depth format"]
            pub fn is_depth(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format has a stencil component"]
            pub fn is_stencil(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format has depth and stencil components"]
            pub fn is_depth_stencil(Format: root::gli::format) -> bool;
        }
        pub mod detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Default)]
            pub struct interpolate {
                pub _address: u8,
            }
            pub type interpolate_type = f32;
            pub type filterBase_size_type = [u8; 0usize];
            pub type filterBase_extent_type = [u8; 0usize];
            pub type filterBase_filterFunc<
                texture_type,
                interpolate_type,
                normalized_type,
                fetch_type,
                texel_type,
            > = ::std::option::Option<
                unsafe extern "C" fn(
                    Texture: *const texture_type,
                    Fetch: fetch_type,
                    SampleCoordWrap: *const normalized_type,
                    Layer: root::gli::detail::filterBase_size_type,
                    Face: root::gli::detail::filterBase_size_type,
                    Level: interpolate_type,
                    BorderColor: *const texel_type,
                ) -> texel_type,
            >;
            pub type convert_fetchFunc<textureType> = ::std::option::Option<
                unsafe extern "C" fn(
                    Texture: *const textureType,
                    TexelCoord: *const [u8; 0usize],
                    Layer: [u8; 0usize],
                    Face: [u8; 0usize],
                    Level: [u8; 0usize],
                ) -> u8,
            >;
            pub type convert_writeFunc<textureType> = ::std::option::Option<
                unsafe extern "C" fn(
                    Texture: *mut textureType,
                    TexelCoord: *const [u8; 0usize],
                    Layer: [u8; 0usize],
                    Face: [u8; 0usize],
                    Level: [u8; 0usize],
                    Texel: *mut u8,
                ),
            >;
            #[repr(C)]
            #[derive(Debug, Default)]
            pub struct convert_func<textureType> {
                pub Fetch: root::gli::detail::convert_fetchFunc<textureType>,
                pub Write: root::gli::detail::convert_writeFunc<textureType>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<textureType>>,
            }
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct storage_linear {
            pub Layers: root::gli::storage_linear_size_type,
            pub Faces: root::gli::storage_linear_size_type,
            pub Levels: root::gli::storage_linear_size_type,
            pub BlockSize: root::gli::storage_linear_size_type,
            pub BlockCount: root::gli::storage_linear_extent_type,
            pub BlockExtent: root::gli::storage_linear_extent_type,
            pub Extent: root::gli::storage_linear_extent_type,
            pub Data: [u64; 3usize],
        }
        pub type storage_linear_extent_type = root::gli::extent3d;
        pub type storage_linear_size_type = usize;
        pub use self::super::super::root::gli::format as storage_linear_format_type;
        pub type storage_linear_data_type = root::gli::byte;
        extern "C" {
            #[link_name = "\u{1}empty"]
            pub fn storage_linear_empty(this: *const root::gli::storage_linear) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}size"]
            pub fn storage_linear_size(
                this: *const root::gli::storage_linear,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}layers"]
            pub fn storage_linear_layers(
                this: *const root::gli::storage_linear,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}levels"]
            pub fn storage_linear_levels(
                this: *const root::gli::storage_linear,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}faces"]
            pub fn storage_linear_faces(
                this: *const root::gli::storage_linear,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}block_size"]
            pub fn storage_linear_block_size(
                this: *const root::gli::storage_linear,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}block_extent"]
            pub fn storage_linear_block_extent(
                this: *const root::gli::storage_linear,
            ) -> root::gli::storage_linear_extent_type;
        }
        extern "C" {
            #[link_name = "\u{1}block_count"]
            pub fn storage_linear_block_count(
                this: *const root::gli::storage_linear,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_extent_type;
        }
        extern "C" {
            #[link_name = "\u{1}extent"]
            pub fn storage_linear_extent(
                this: *const root::gli::storage_linear,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_extent_type;
        }
        extern "C" {
            #[link_name = "\u{1}data"]
            pub fn storage_linear_data(
                this: *mut root::gli::storage_linear,
            ) -> *mut root::gli::storage_linear_data_type;
        }
        extern "C" {
            #[link_name = "\u{1}data"]
            pub fn storage_linear_data1(
                this: *const root::gli::storage_linear,
            ) -> *const root::gli::storage_linear_data_type;
        }
        extern "C" {
            #[doc = " Compute the relative memory offset to access the data for a specific layer, face and level"]
            #[link_name = "\u{1}base_offset"]
            pub fn storage_linear_base_offset(
                this: *const root::gli::storage_linear,
                Layer: root::gli::storage_linear_size_type,
                Face: root::gli::storage_linear_size_type,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}image_offset"]
            pub fn storage_linear_image_offset(
                this: *const root::gli::storage_linear,
                Coord: *const root::gli::extent1d,
                Extent: *const root::gli::extent1d,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}image_offset"]
            pub fn storage_linear_image_offset1(
                this: *const root::gli::storage_linear,
                Coord: *const root::gli::extent2d,
                Extent: *const root::gli::extent2d,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}image_offset"]
            pub fn storage_linear_image_offset2(
                this: *const root::gli::storage_linear,
                Coord: *const root::gli::extent3d,
                Extent: *const root::gli::extent3d,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[doc = " Copy a subset of a specific image of a texture"]
            #[link_name = "\u{1}copy"]
            pub fn storage_linear_copy(
                this: *mut root::gli::storage_linear,
                StorageSrc: *const root::gli::storage_linear,
                LayerSrc: usize,
                FaceSrc: usize,
                LevelSrc: usize,
                BlockIndexSrc: *const root::gli::storage_linear_extent_type,
                LayerDst: usize,
                FaceDst: usize,
                LevelDst: usize,
                BlockIndexDst: *const root::gli::storage_linear_extent_type,
                BlockCount: *const root::gli::storage_linear_extent_type,
            );
        }
        extern "C" {
            #[link_name = "\u{1}level_size"]
            pub fn storage_linear_level_size(
                this: *const root::gli::storage_linear,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}face_size"]
            pub fn storage_linear_face_size(
                this: *const root::gli::storage_linear,
                BaseLevel: root::gli::storage_linear_size_type,
                MaxLevel: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}layer_size"]
            pub fn storage_linear_layer_size(
                this: *const root::gli::storage_linear,
                BaseFace: root::gli::storage_linear_size_type,
                MaxFace: root::gli::storage_linear_size_type,
                BaseLevel: root::gli::storage_linear_size_type,
                MaxLevel: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type;
        }
        extern "C" {
            #[link_name = "\u{1}storage_linear"]
            pub fn storage_linear_storage_linear(this: *mut root::gli::storage_linear);
        }
        extern "C" {
            #[link_name = "\u{1}storage_linear"]
            pub fn storage_linear_storage_linear1(
                this: *mut root::gli::storage_linear,
                Format: root::gli::storage_linear_format_type,
                Extent: *const root::gli::storage_linear_extent_type,
                Layers: root::gli::storage_linear_size_type,
                Faces: root::gli::storage_linear_size_type,
                Levels: root::gli::storage_linear_size_type,
            );
        }
        impl storage_linear {
            #[inline]
            pub unsafe fn empty(&self) -> bool {
                storage_linear_empty(self)
            }
            #[inline]
            pub unsafe fn size(&self) -> root::gli::storage_linear_size_type {
                storage_linear_size(self)
            }
            #[inline]
            pub unsafe fn layers(&self) -> root::gli::storage_linear_size_type {
                storage_linear_layers(self)
            }
            #[inline]
            pub unsafe fn levels(&self) -> root::gli::storage_linear_size_type {
                storage_linear_levels(self)
            }
            #[inline]
            pub unsafe fn faces(&self) -> root::gli::storage_linear_size_type {
                storage_linear_faces(self)
            }
            #[inline]
            pub unsafe fn block_size(&self) -> root::gli::storage_linear_size_type {
                storage_linear_block_size(self)
            }
            #[inline]
            pub unsafe fn block_extent(&self) -> root::gli::storage_linear_extent_type {
                storage_linear_block_extent(self)
            }
            #[inline]
            pub unsafe fn block_count(
                &self,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_extent_type {
                storage_linear_block_count(self, Level)
            }
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_extent_type {
                storage_linear_extent(self, Level)
            }
            #[inline]
            pub unsafe fn data(&mut self) -> *mut root::gli::storage_linear_data_type {
                storage_linear_data(self)
            }
            #[inline]
            pub unsafe fn data1(&self) -> *const root::gli::storage_linear_data_type {
                storage_linear_data1(self)
            }
            #[inline]
            pub unsafe fn base_offset(
                &self,
                Layer: root::gli::storage_linear_size_type,
                Face: root::gli::storage_linear_size_type,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type {
                storage_linear_base_offset(self, Layer, Face, Level)
            }
            #[inline]
            pub unsafe fn image_offset(
                &self,
                Coord: *const root::gli::extent1d,
                Extent: *const root::gli::extent1d,
            ) -> root::gli::storage_linear_size_type {
                storage_linear_image_offset(self, Coord, Extent)
            }
            #[inline]
            pub unsafe fn image_offset1(
                &self,
                Coord: *const root::gli::extent2d,
                Extent: *const root::gli::extent2d,
            ) -> root::gli::storage_linear_size_type {
                storage_linear_image_offset1(self, Coord, Extent)
            }
            #[inline]
            pub unsafe fn image_offset2(
                &self,
                Coord: *const root::gli::extent3d,
                Extent: *const root::gli::extent3d,
            ) -> root::gli::storage_linear_size_type {
                storage_linear_image_offset2(self, Coord, Extent)
            }
            #[inline]
            pub unsafe fn copy(
                &mut self,
                StorageSrc: *const root::gli::storage_linear,
                LayerSrc: usize,
                FaceSrc: usize,
                LevelSrc: usize,
                BlockIndexSrc: *const root::gli::storage_linear_extent_type,
                LayerDst: usize,
                FaceDst: usize,
                LevelDst: usize,
                BlockIndexDst: *const root::gli::storage_linear_extent_type,
                BlockCount: *const root::gli::storage_linear_extent_type,
            ) {
                storage_linear_copy(
                    self,
                    StorageSrc,
                    LayerSrc,
                    FaceSrc,
                    LevelSrc,
                    BlockIndexSrc,
                    LayerDst,
                    FaceDst,
                    LevelDst,
                    BlockIndexDst,
                    BlockCount,
                )
            }
            #[inline]
            pub unsafe fn level_size(
                &self,
                Level: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type {
                storage_linear_level_size(self, Level)
            }
            #[inline]
            pub unsafe fn face_size(
                &self,
                BaseLevel: root::gli::storage_linear_size_type,
                MaxLevel: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type {
                storage_linear_face_size(self, BaseLevel, MaxLevel)
            }
            #[inline]
            pub unsafe fn layer_size(
                &self,
                BaseFace: root::gli::storage_linear_size_type,
                MaxFace: root::gli::storage_linear_size_type,
                BaseLevel: root::gli::storage_linear_size_type,
                MaxLevel: root::gli::storage_linear_size_type,
            ) -> root::gli::storage_linear_size_type {
                storage_linear_layer_size(self, BaseFace, MaxFace, BaseLevel, MaxLevel)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                storage_linear_storage_linear(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::storage_linear_format_type,
                Extent: *const root::gli::storage_linear_extent_type,
                Layers: root::gli::storage_linear_size_type,
                Faces: root::gli::storage_linear_size_type,
                Levels: root::gli::storage_linear_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                storage_linear_storage_linear1(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Layers,
                    Faces,
                    Levels,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " Genetic texture class. It can support any target."]
        #[repr(C)]
        pub struct texture {
            pub Storage: [u64; 2usize],
            pub is_print_shared_storage_count: bool,
            pub Target: root::gli::texture_target_type,
            pub Format: root::gli::texture_format_type,
            pub BaseLayer: root::gli::texture_size_type,
            pub MaxLayer: root::gli::texture_size_type,
            pub BaseFace: root::gli::texture_size_type,
            pub MaxFace: root::gli::texture_size_type,
            pub BaseLevel: root::gli::texture_size_type,
            pub MaxLevel: root::gli::texture_size_type,
            pub Swizzles: root::gli::texture_swizzles_type,
            pub Cache: root::gli::texture_cache,
        }
        pub type texture_size_type = usize;
        pub use self::super::super::root::gli::format as texture_format_type;
        pub use self::super::super::root::gli::target as texture_target_type;
        pub type texture_swizzles_type = root::gli::swizzles;
        pub type texture_storage_type = root::gli::storage_linear;
        pub type texture_data_type = root::gli::storage_linear_data_type;
        pub type texture_extent_type = root::gli::storage_linear_extent_type;
        #[repr(C)]
        pub struct texture_cache {
            pub Faces: root::gli::texture_size_type,
            pub Levels: root::gli::texture_size_type,
            pub BaseAddresses: [u64; 3usize],
            pub ImageExtent: [u32; 48usize],
            pub ImageMemorySize: [u64; 16usize],
            pub GlobalMemorySize: root::gli::texture_size_type,
        }
        pub const texture_cache_ctor_DEFAULT: root::gli::texture_cache_ctor = 0;
        pub type texture_cache_ctor = u32;
        impl Default for texture_cache {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[doc = " Return whether the texture instance is empty, no storage_type or description have been assigned to the instance."]
            #[link_name = "\u{1}empty"]
            pub fn texture_empty(this: *const root::gli::texture) -> bool;
        }
        extern "C" {
            #[doc = " Return the texture instance format"]
            #[link_name = "\u{1}format"]
            pub fn texture_format(
                this: *const root::gli::texture,
            ) -> root::gli::texture_format_type;
        }
        extern "C" {
            #[link_name = "\u{1}swizzles"]
            pub fn texture_swizzles(
                this: *const root::gli::texture,
            ) -> root::gli::texture_swizzles_type;
        }
        extern "C" {
            #[doc = " Return the base layer of the texture instance, effectively a memory offset in the actual texture storage_type to identify where to start reading the layers."]
            #[link_name = "\u{1}base_layer"]
            pub fn texture_base_layer(
                this: *const root::gli::texture,
            ) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return the max layer of the texture instance, effectively a memory offset to the beginning of the last layer in the actual texture storage_type that the texture instance can access."]
            #[link_name = "\u{1}max_layer"]
            pub fn texture_max_layer(
                this: *const root::gli::texture,
            ) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return max_layer() - base_layer() + 1"]
            #[link_name = "\u{1}layers"]
            pub fn texture_layers(this: *const root::gli::texture) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return the base face of the texture instance, effectively a memory offset in the actual texture storage_type to identify where to start reading the faces."]
            #[link_name = "\u{1}base_face"]
            pub fn texture_base_face(
                this: *const root::gli::texture,
            ) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return the max face of the texture instance, effectively a memory offset to the beginning of the last face in the actual texture storage_type that the texture instance can access."]
            #[link_name = "\u{1}max_face"]
            pub fn texture_max_face(
                this: *const root::gli::texture,
            ) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return max_face() - base_face() + 1"]
            #[link_name = "\u{1}faces"]
            pub fn texture_faces(this: *const root::gli::texture) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return the base level of the texture instance, effectively a memory offset in the actual texture storage_type to identify where to start reading the levels."]
            #[link_name = "\u{1}base_level"]
            pub fn texture_base_level(
                this: *const root::gli::texture,
            ) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return the max level of the texture instance, effectively a memory offset to the beginning of the last level in the actual texture storage_type that the texture instance can access."]
            #[link_name = "\u{1}max_level"]
            pub fn texture_max_level(
                this: *const root::gli::texture,
            ) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return max_level() - base_level() + 1."]
            #[link_name = "\u{1}levels"]
            pub fn texture_levels(this: *const root::gli::texture) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return the size of a texture instance: width, height and depth."]
            #[link_name = "\u{1}extent"]
            pub fn texture_extent(
                this: *const root::gli::texture,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_extent_type;
        }
        extern "C" {
            #[doc = " Return the memory size of a texture instance storage_type in bytes."]
            #[link_name = "\u{1}size"]
            pub fn texture_size(this: *const root::gli::texture) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return the memory size of a specific level identified by Level."]
            #[link_name = "\u{1}size"]
            pub fn texture_size1(
                this: *const root::gli::texture,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_size_type;
        }
        extern "C" {
            #[doc = " Return a pointer to the beginning of the texture instance data."]
            #[link_name = "\u{1}data"]
            pub fn texture_data(this: *mut root::gli::texture) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[doc = " Return a pointer to the beginning of the texture instance data."]
            #[link_name = "\u{1}data"]
            pub fn texture_data1(this: *const root::gli::texture) -> *const ::std::os::raw::c_void;
        }
        extern "C" {
            #[doc = " Return a pointer to the beginning of the texture instance data."]
            #[link_name = "\u{1}data"]
            pub fn texture_data2(
                this: *mut root::gli::texture,
                Layer: root::gli::texture_size_type,
                Face: root::gli::texture_size_type,
                Level: root::gli::texture_size_type,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[doc = " Return a pointer to the beginning of the texture instance data."]
            #[link_name = "\u{1}data"]
            pub fn texture_data3(
                this: *const root::gli::texture,
                Layer: root::gli::texture_size_type,
                Face: root::gli::texture_size_type,
                Level: root::gli::texture_size_type,
            ) -> *const ::std::os::raw::c_void;
        }
        extern "C" {
            #[doc = " Clear the entire texture storage_linear with zeros"]
            #[link_name = "\u{1}clear"]
            pub fn texture_clear(this: *mut root::gli::texture);
        }
        extern "C" {
            #[doc = " Copy a specific image of a texture"]
            #[link_name = "\u{1}copy"]
            pub fn texture_copy(
                this: *mut root::gli::texture,
                TextureSrc: *const root::gli::texture,
                LayerSrc: usize,
                FaceSrc: usize,
                LevelSrc: usize,
                LayerDst: usize,
                FaceDst: usize,
                LevelDst: usize,
            );
        }
        extern "C" {
            #[doc = " Copy a subset of a specific image of a texture"]
            #[link_name = "\u{1}copy"]
            pub fn texture_copy1(
                this: *mut root::gli::texture,
                TextureSrc: *const root::gli::texture,
                LayerSrc: usize,
                FaceSrc: usize,
                LevelSrc: usize,
                OffsetSrc: *const root::gli::texture_extent_type,
                LayerDst: usize,
                FaceDst: usize,
                LevelDst: usize,
                OffsetDst: *const root::gli::texture_extent_type,
                Extent: *const root::gli::texture_extent_type,
            );
        }
        extern "C" {
            #[doc = " Create an empty texture instance"]
            #[link_name = "\u{1}texture"]
            pub fn texture_texture(this: *mut root::gli::texture);
        }
        extern "C" {
            #[doc = " Create a texture object and allocate a texture storage for it"]
            #[doc = " @param Target Type/Shape of the texture storage_linear"]
            #[doc = " @param Format Texel format"]
            #[doc = " @param Extent Size of the texture: width, height and depth."]
            #[doc = " @param Layers Number of one-dimensional or two-dimensional images of identical size and format"]
            #[doc = " @param Faces 6 for cube map textures otherwise 1."]
            #[doc = " @param Levels Number of images in the texture mipmap chain."]
            #[doc = " @param Swizzles A mechanism to swizzle the components of a texture before they are applied according to the texture environment."]
            #[link_name = "\u{1}texture"]
            pub fn texture_texture1(
                this: *mut root::gli::texture,
                Target: root::gli::texture_target_type,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_extent_type,
                Layers: root::gli::texture_size_type,
                Faces: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture object by sharing an existing texture storage_type from another texture instance."]
            #[doc = " This texture object is effectively a texture view where the layer, the face and the level allows identifying"]
            #[doc = " a specific subset of the texture storage_linear source."]
            #[doc = " This texture object is effectively a texture view where the target and format can be reinterpreted"]
            #[doc = " with a different compatible texture target and texture format."]
            #[link_name = "\u{1}texture"]
            pub fn texture_texture2(
                this: *mut root::gli::texture,
                Texture: *const root::gli::texture,
                Target: root::gli::texture_target_type,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture object by sharing an existing texture storage_type from another texture instance."]
            #[doc = " This texture object is effectively a texture view where the target and format can be reinterpreted"]
            #[doc = " with a different compatible texture target and texture format."]
            #[link_name = "\u{1}texture"]
            pub fn texture_texture3(
                this: *mut root::gli::texture,
                Texture: *const root::gli::texture,
                Target: root::gli::texture_target_type,
                Format: root::gli::texture_format_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        impl Default for texture {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture {
            #[inline]
            pub unsafe fn empty(&self) -> bool {
                texture_empty(self)
            }
            #[inline]
            pub unsafe fn format(&self) -> root::gli::texture_format_type {
                texture_format(self)
            }
            #[inline]
            pub unsafe fn swizzles(&self) -> root::gli::texture_swizzles_type {
                texture_swizzles(self)
            }
            #[inline]
            pub unsafe fn base_layer(&self) -> root::gli::texture_size_type {
                texture_base_layer(self)
            }
            #[inline]
            pub unsafe fn max_layer(&self) -> root::gli::texture_size_type {
                texture_max_layer(self)
            }
            #[inline]
            pub unsafe fn layers(&self) -> root::gli::texture_size_type {
                texture_layers(self)
            }
            #[inline]
            pub unsafe fn base_face(&self) -> root::gli::texture_size_type {
                texture_base_face(self)
            }
            #[inline]
            pub unsafe fn max_face(&self) -> root::gli::texture_size_type {
                texture_max_face(self)
            }
            #[inline]
            pub unsafe fn faces(&self) -> root::gli::texture_size_type {
                texture_faces(self)
            }
            #[inline]
            pub unsafe fn base_level(&self) -> root::gli::texture_size_type {
                texture_base_level(self)
            }
            #[inline]
            pub unsafe fn max_level(&self) -> root::gli::texture_size_type {
                texture_max_level(self)
            }
            #[inline]
            pub unsafe fn levels(&self) -> root::gli::texture_size_type {
                texture_levels(self)
            }
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_extent_type {
                texture_extent(self, Level)
            }
            #[inline]
            pub unsafe fn size(&self) -> root::gli::texture_size_type {
                texture_size(self)
            }
            #[inline]
            pub unsafe fn size1(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_size_type {
                texture_size1(self, Level)
            }
            #[inline]
            pub unsafe fn data(&mut self) -> *mut ::std::os::raw::c_void {
                texture_data(self)
            }
            #[inline]
            pub unsafe fn data1(&self) -> *const ::std::os::raw::c_void {
                texture_data1(self)
            }
            #[inline]
            pub unsafe fn data2(
                &mut self,
                Layer: root::gli::texture_size_type,
                Face: root::gli::texture_size_type,
                Level: root::gli::texture_size_type,
            ) -> *mut ::std::os::raw::c_void {
                texture_data2(self, Layer, Face, Level)
            }
            #[inline]
            pub unsafe fn data3(
                &self,
                Layer: root::gli::texture_size_type,
                Face: root::gli::texture_size_type,
                Level: root::gli::texture_size_type,
            ) -> *const ::std::os::raw::c_void {
                texture_data3(self, Layer, Face, Level)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                texture_clear(self)
            }
            #[inline]
            pub unsafe fn copy(
                &mut self,
                TextureSrc: *const root::gli::texture,
                LayerSrc: usize,
                FaceSrc: usize,
                LevelSrc: usize,
                LayerDst: usize,
                FaceDst: usize,
                LevelDst: usize,
            ) {
                texture_copy(
                    self, TextureSrc, LayerSrc, FaceSrc, LevelSrc, LayerDst, FaceDst, LevelDst,
                )
            }
            #[inline]
            pub unsafe fn copy1(
                &mut self,
                TextureSrc: *const root::gli::texture,
                LayerSrc: usize,
                FaceSrc: usize,
                LevelSrc: usize,
                OffsetSrc: *const root::gli::texture_extent_type,
                LayerDst: usize,
                FaceDst: usize,
                LevelDst: usize,
                OffsetDst: *const root::gli::texture_extent_type,
                Extent: *const root::gli::texture_extent_type,
            ) {
                texture_copy1(
                    self, TextureSrc, LayerSrc, FaceSrc, LevelSrc, OffsetSrc, LayerDst, FaceDst,
                    LevelDst, OffsetDst, Extent,
                )
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_texture(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Target: root::gli::texture_target_type,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_extent_type,
                Layers: root::gli::texture_size_type,
                Faces: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_texture1(
                    __bindgen_tmp.as_mut_ptr(),
                    Target,
                    Format,
                    Extent,
                    Layers,
                    Faces,
                    Levels,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Texture: *const root::gli::texture,
                Target: root::gli::texture_target_type,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_texture2(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Target,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                Texture: *const root::gli::texture,
                Target: root::gli::texture_target_type,
                Format: root::gli::texture_format_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_texture3(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Target,
                    Format,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " Image, representation for a single texture level"]
        #[repr(C)]
        #[derive(Debug)]
        pub struct image {
            pub is_print_shared_storage_count: bool,
            pub Storage: [u64; 2usize],
            pub Format: root::gli::image_format_type,
            pub BaseLevel: root::gli::image_size_type,
            pub Data: *mut root::gli::image_data_type,
            pub Size: root::gli::image_size_type,
        }
        pub type image_size_type = usize;
        pub use self::super::super::root::gli::format as image_format_type;
        pub type image_extent_type = root::gli::storage_linear_extent_type;
        pub type image_data_type = root::gli::storage_linear_data_type;
        extern "C" {
            #[doc = " Return whether the image instance is empty, no storage_linear or description have been assigned to the instance."]
            #[link_name = "\u{1}empty"]
            pub fn image_empty(this: *const root::gli::image) -> bool;
        }
        extern "C" {
            #[doc = " Return the image instance format."]
            #[link_name = "\u{1}format"]
            pub fn image_format(this: *const root::gli::image) -> root::gli::image_format_type;
        }
        extern "C" {
            #[doc = " Return the dimensions of an image instance: width, height and depth."]
            #[link_name = "\u{1}extent"]
            pub fn image_extent(this: *const root::gli::image) -> root::gli::image_extent_type;
        }
        extern "C" {
            #[doc = " Return the memory size of an image instance storage_linear in bytes."]
            #[link_name = "\u{1}size"]
            pub fn image_size(this: *const root::gli::image) -> root::gli::image_size_type;
        }
        extern "C" {
            #[doc = " Return a pointer to the beginning of the image instance data."]
            #[link_name = "\u{1}data"]
            pub fn image_data(this: *mut root::gli::image) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[doc = " Return a pointer to the beginning of the image instance data."]
            #[link_name = "\u{1}data"]
            pub fn image_data1(this: *const root::gli::image) -> *const ::std::os::raw::c_void;
        }
        extern "C" {
            #[doc = " Clear the entire image storage_linear with zeros"]
            #[link_name = "\u{1}clear"]
            pub fn image_clear(this: *mut root::gli::image);
        }
        extern "C" {
            #[doc = " Create an empty image instance"]
            #[link_name = "\u{1}image"]
            pub fn image_image(this: *mut root::gli::image);
        }
        extern "C" {
            #[doc = " Create an image object and allocate an image storoge for it."]
            #[link_name = "\u{1}image"]
            pub fn image_image1(
                this: *mut root::gli::image,
                Format: root::gli::image_format_type,
                Extent: *const root::gli::image_extent_type,
            );
        }
        extern "C" {
            #[doc = " Create an image object by sharing an existing image storage_linear from another image instance."]
            #[doc = " This image object is effectively an image view where format can be reinterpreted"]
            #[doc = " with a different compatible image format."]
            #[doc = " For formats to be compatible, the block size of source and destination must match."]
            #[link_name = "\u{1}image"]
            pub fn image_image2(
                this: *mut root::gli::image,
                Image: *const root::gli::image,
                Format: root::gli::image_format_type,
            );
        }
        extern "C" {
            #[link_name = "\u{1}image"]
            pub fn image_image3(
                this: *mut root::gli::image,
                Texture: *const root::gli::texture,
                Format: root::gli::image_format_type,
                BaseLayer: root::gli::image_size_type,
                BaseFace: root::gli::image_size_type,
                BaseLevel: root::gli::image_size_type,
            );
        }
        impl Default for image {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl image {
            #[inline]
            pub unsafe fn empty(&self) -> bool {
                image_empty(self)
            }
            #[inline]
            pub unsafe fn format(&self) -> root::gli::image_format_type {
                image_format(self)
            }
            #[inline]
            pub unsafe fn extent(&self) -> root::gli::image_extent_type {
                image_extent(self)
            }
            #[inline]
            pub unsafe fn size(&self) -> root::gli::image_size_type {
                image_size(self)
            }
            #[inline]
            pub unsafe fn data(&mut self) -> *mut ::std::os::raw::c_void {
                image_data(self)
            }
            #[inline]
            pub unsafe fn data1(&self) -> *const ::std::os::raw::c_void {
                image_data1(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                image_clear(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                image_image(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::image_format_type,
                Extent: *const root::gli::image_extent_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                image_image1(__bindgen_tmp.as_mut_ptr(), Format, Extent);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Image: *const root::gli::image,
                Format: root::gli::image_format_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                image_image2(__bindgen_tmp.as_mut_ptr(), Image, Format);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                Texture: *const root::gli::texture,
                Format: root::gli::image_format_type,
                BaseLayer: root::gli::image_size_type,
                BaseFace: root::gli::image_size_type,
                BaseLevel: root::gli::image_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                image_image3(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    BaseFace,
                    BaseLevel,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " 1d texture"]
        #[repr(C)]
        pub struct texture1d {
            pub _base: root::gli::texture,
        }
        pub type texture1d_extent_type = root::gli::extent1d;
        extern "C" {
            #[doc = " Return the width of a texture instance"]
            #[link_name = "\u{1}extent"]
            pub fn texture1d_extent(
                this: *const root::gli::texture1d,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture1d_extent_type;
        }
        extern "C" {
            #[doc = " Create an empty texture 1D"]
            #[link_name = "\u{1}texture1d"]
            pub fn texture1d_texture1d(this: *mut root::gli::texture1d);
        }
        extern "C" {
            #[doc = " Create a texture1d and allocate a new storage_linear"]
            #[link_name = "\u{1}texture1d"]
            pub fn texture1d_texture1d1(
                this: *mut root::gli::texture1d,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture1d and allocate a new storage_linear with a complete mipmap chain"]
            #[link_name = "\u{1}texture1d"]
            pub fn texture1d_texture1d2(
                this: *mut root::gli::texture1d,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture1d view with an existing storage_linear"]
            #[link_name = "\u{1}texture1d"]
            pub fn texture1d_texture1d3(
                this: *mut root::gli::texture1d,
                Texture: *const root::gli::texture,
            );
        }
        extern "C" {
            #[doc = " Create a texture1d view with an existing storage_linear"]
            #[link_name = "\u{1}texture1d"]
            pub fn texture1d_texture1d4(
                this: *mut root::gli::texture1d,
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture1d view, reference a subset of an existing texture1d instance"]
            #[link_name = "\u{1}texture1d"]
            pub fn texture1d_texture1d5(
                this: *mut root::gli::texture1d,
                Texture: *const root::gli::texture1d,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            );
        }
        impl Default for texture1d {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture1d {
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture1d_extent_type {
                texture1d_extent(self, Level)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_texture1d(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_texture1d1(__bindgen_tmp.as_mut_ptr(), Format, Extent, Levels, Swizzles);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_texture1d2(__bindgen_tmp.as_mut_ptr(), Format, Extent, Swizzles);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(Texture: *const root::gli::texture) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_texture1d3(__bindgen_tmp.as_mut_ptr(), Texture);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_texture1d4(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(
                Texture: *const root::gli::texture1d,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_texture1d5(__bindgen_tmp.as_mut_ptr(), Texture, BaseLevel, MaxLevel);
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " 1d array texture"]
        #[repr(C)]
        pub struct texture1d_array {
            pub _base: root::gli::texture,
        }
        pub type texture1d_array_extent_type = root::gli::extent1d;
        extern "C" {
            #[doc = " Return the width of a texture instance"]
            #[link_name = "\u{1}extent"]
            pub fn texture1d_array_extent(
                this: *const root::gli::texture1d_array,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture1d_array_extent_type;
        }
        extern "C" {
            #[doc = " Create an empty texture 1D array"]
            #[link_name = "\u{1}texture1d_array"]
            pub fn texture1d_array_texture1d_array(this: *mut root::gli::texture1d_array);
        }
        extern "C" {
            #[doc = " Create a texture1d_array and allocate a new storage_linear"]
            #[link_name = "\u{1}texture1d_array"]
            pub fn texture1d_array_texture1d_array1(
                this: *mut root::gli::texture1d_array,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture1d_array and allocate a new storage_linear with a complete mipmap chain"]
            #[link_name = "\u{1}texture1d_array"]
            pub fn texture1d_array_texture1d_array2(
                this: *mut root::gli::texture1d_array,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture1d_array view with an existing storage_linear"]
            #[link_name = "\u{1}texture1d_array"]
            pub fn texture1d_array_texture1d_array3(
                this: *mut root::gli::texture1d_array,
                Texture: *const root::gli::texture,
            );
        }
        extern "C" {
            #[doc = " Create a texture1d_array view with an existing storage_linear"]
            #[link_name = "\u{1}texture1d_array"]
            pub fn texture1d_array_texture1d_array4(
                this: *mut root::gli::texture1d_array,
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture view, reference a subset of an exiting storage_linear"]
            #[link_name = "\u{1}texture1d_array"]
            pub fn texture1d_array_texture1d_array5(
                this: *mut root::gli::texture1d_array,
                Texture: *const root::gli::texture1d_array,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            );
        }
        impl Default for texture1d_array {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture1d_array {
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture1d_array_extent_type {
                texture1d_array_extent(self, Level)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_array_texture1d_array(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_array_texture1d_array1(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Layers,
                    Levels,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture1d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_array_texture1d_array2(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Layers,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(Texture: *const root::gli::texture) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_array_texture1d_array3(__bindgen_tmp.as_mut_ptr(), Texture);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_array_texture1d_array4(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(
                Texture: *const root::gli::texture1d_array,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture1d_array_texture1d_array5(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    BaseLayer,
                    MaxLayer,
                    BaseLevel,
                    MaxLevel,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " 2d texture"]
        #[repr(C)]
        pub struct texture2d {
            pub _base: root::gli::texture,
        }
        pub type texture2d_extent_type = root::gli::extent2d;
        extern "C" {
            #[doc = " Return the dimensions of a texture instance: width and height."]
            #[link_name = "\u{1}extent"]
            pub fn texture2d_extent(
                this: *const root::gli::texture2d,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture2d_extent_type;
        }
        extern "C" {
            #[doc = " Create an empty texture 2D."]
            #[link_name = "\u{1}texture2d"]
            pub fn texture2d_texture2d(this: *mut root::gli::texture2d);
        }
        extern "C" {
            #[doc = " Create a texture2d and allocate a new storage_linear."]
            #[link_name = "\u{1}texture2d"]
            pub fn texture2d_texture2d1(
                this: *mut root::gli::texture2d,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture2d and allocate a new storage_linear with a complete mipmap chain."]
            #[link_name = "\u{1}texture2d"]
            pub fn texture2d_texture2d2(
                this: *mut root::gli::texture2d,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture2d view with an existing storage_linear."]
            #[link_name = "\u{1}texture2d"]
            pub fn texture2d_texture2d3(
                this: *mut root::gli::texture2d,
                Texture: *const root::gli::texture,
            );
        }
        extern "C" {
            #[doc = " Create a texture2d view with an existing storage_linear."]
            #[link_name = "\u{1}texture2d"]
            pub fn texture2d_texture2d4(
                this: *mut root::gli::texture2d,
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture2d view, reference a subset of an existing texture2d instance."]
            #[link_name = "\u{1}texture2d"]
            pub fn texture2d_texture2d5(
                this: *mut root::gli::texture2d,
                Texture: *const root::gli::texture2d,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            );
        }
        impl Default for texture2d {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture2d {
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture2d_extent_type {
                texture2d_extent(self, Level)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_texture2d(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_texture2d1(__bindgen_tmp.as_mut_ptr(), Format, Extent, Levels, Swizzles);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_texture2d2(__bindgen_tmp.as_mut_ptr(), Format, Extent, Swizzles);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(Texture: *const root::gli::texture) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_texture2d3(__bindgen_tmp.as_mut_ptr(), Texture);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_texture2d4(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(
                Texture: *const root::gli::texture2d,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_texture2d5(__bindgen_tmp.as_mut_ptr(), Texture, BaseLevel, MaxLevel);
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " 2d array texture"]
        #[repr(C)]
        pub struct texture2d_array {
            pub _base: root::gli::texture,
        }
        pub type texture2d_array_extent_type = root::gli::extent2d;
        extern "C" {
            #[doc = " Return the dimensions of a texture instance: width and height"]
            #[link_name = "\u{1}extent"]
            pub fn texture2d_array_extent(
                this: *const root::gli::texture2d_array,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture2d_array_extent_type;
        }
        extern "C" {
            #[doc = " Create an empty texture 2D array"]
            #[link_name = "\u{1}texture2d_array"]
            pub fn texture2d_array_texture2d_array(this: *mut root::gli::texture2d_array);
        }
        extern "C" {
            #[doc = " Create a texture2d_array and allocate a new storage_linear"]
            #[link_name = "\u{1}texture2d_array"]
            pub fn texture2d_array_texture2d_array1(
                this: *mut root::gli::texture2d_array,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture2d_array and allocate a new storage_linear with a complete mipmap chain"]
            #[link_name = "\u{1}texture2d_array"]
            pub fn texture2d_array_texture2d_array2(
                this: *mut root::gli::texture2d_array,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture2d_array view with an existing storage_linear"]
            #[link_name = "\u{1}texture2d_array"]
            pub fn texture2d_array_texture2d_array3(
                this: *mut root::gli::texture2d_array,
                Texture: *const root::gli::texture,
            );
        }
        extern "C" {
            #[doc = " Create a texture2d_array view with an existing storage_linear"]
            #[link_name = "\u{1}texture2d_array"]
            pub fn texture2d_array_texture2d_array4(
                this: *mut root::gli::texture2d_array,
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture view, reference a subset of an exiting texture2d_array instance"]
            #[link_name = "\u{1}texture2d_array"]
            pub fn texture2d_array_texture2d_array5(
                this: *mut root::gli::texture2d_array,
                Texture: *const root::gli::texture2d_array,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            );
        }
        impl Default for texture2d_array {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture2d_array {
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture2d_array_extent_type {
                texture2d_array_extent(self, Level)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_array_texture2d_array(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_array_texture2d_array1(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Layers,
                    Levels,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture2d_array_extent_type,
                Layers: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_array_texture2d_array2(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Layers,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(Texture: *const root::gli::texture) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_array_texture2d_array3(__bindgen_tmp.as_mut_ptr(), Texture);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_array_texture2d_array4(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(
                Texture: *const root::gli::texture2d_array,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture2d_array_texture2d_array5(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    BaseLayer,
                    MaxLayer,
                    BaseLevel,
                    MaxLevel,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " 3d texture"]
        #[repr(C)]
        pub struct texture3d {
            pub _base: root::gli::texture,
        }
        pub type texture3d_extent_type = root::gli::extent3d;
        extern "C" {
            #[doc = " Return the dimensions of a texture instance: width, height and depth"]
            #[link_name = "\u{1}extent"]
            pub fn texture3d_extent(
                this: *const root::gli::texture3d,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture3d_extent_type;
        }
        extern "C" {
            #[doc = " Create an empty texture 3D"]
            #[link_name = "\u{1}texture3d"]
            pub fn texture3d_texture3d(this: *mut root::gli::texture3d);
        }
        extern "C" {
            #[doc = " Create a texture3d and allocate a new storage_linear"]
            #[link_name = "\u{1}texture3d"]
            pub fn texture3d_texture3d1(
                this: *mut root::gli::texture3d,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture3d_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture3d and allocate a new storage_linear with a complete mipmap chain"]
            #[link_name = "\u{1}texture3d"]
            pub fn texture3d_texture3d2(
                this: *mut root::gli::texture3d,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture3d_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture3d view with an existing storage_linear"]
            #[link_name = "\u{1}texture3d"]
            pub fn texture3d_texture3d3(
                this: *mut root::gli::texture3d,
                Texture: *const root::gli::texture,
            );
        }
        extern "C" {
            #[doc = " Create a texture3d view with an existing storage_linear"]
            #[link_name = "\u{1}texture3d"]
            pub fn texture3d_texture3d4(
                this: *mut root::gli::texture3d,
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture3d view, reference a subset of an existing texture3d instance"]
            #[link_name = "\u{1}texture3d"]
            pub fn texture3d_texture3d5(
                this: *mut root::gli::texture3d,
                Texture: *const root::gli::texture3d,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            );
        }
        impl Default for texture3d {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture3d {
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture3d_extent_type {
                texture3d_extent(self, Level)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture3d_texture3d(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture3d_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture3d_texture3d1(__bindgen_tmp.as_mut_ptr(), Format, Extent, Levels, Swizzles);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture3d_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture3d_texture3d2(__bindgen_tmp.as_mut_ptr(), Format, Extent, Swizzles);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(Texture: *const root::gli::texture) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture3d_texture3d3(__bindgen_tmp.as_mut_ptr(), Texture);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture3d_texture3d4(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(
                Texture: *const root::gli::texture3d,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture3d_texture3d5(__bindgen_tmp.as_mut_ptr(), Texture, BaseLevel, MaxLevel);
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " Cube map texture"]
        #[repr(C)]
        pub struct texture_cube {
            pub _base: root::gli::texture,
        }
        pub type texture_cube_extent_type = root::gli::extent2d;
        extern "C" {
            #[doc = " Return the dimensions of a texture instance: width and height where both should be equal."]
            #[link_name = "\u{1}extent"]
            pub fn texture_cube_extent(
                this: *const root::gli::texture_cube,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_cube_extent_type;
        }
        extern "C" {
            #[doc = " Create an empty texture cube"]
            #[link_name = "\u{1}texture_cube"]
            pub fn texture_cube_texture_cube(this: *mut root::gli::texture_cube);
        }
        extern "C" {
            #[doc = " Create a texture_cube and allocate a new storage_linear"]
            #[link_name = "\u{1}texture_cube"]
            pub fn texture_cube_texture_cube1(
                this: *mut root::gli::texture_cube,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture_cube and allocate a new storage_linear with a complete mipmap chain"]
            #[link_name = "\u{1}texture_cube"]
            pub fn texture_cube_texture_cube2(
                this: *mut root::gli::texture_cube,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture_cube view with an existing storage_linear"]
            #[link_name = "\u{1}texture_cube"]
            pub fn texture_cube_texture_cube3(
                this: *mut root::gli::texture_cube,
                Texture: *const root::gli::texture,
            );
        }
        extern "C" {
            #[doc = " Create a texture_cube view with an existing storage_linear"]
            #[link_name = "\u{1}texture_cube"]
            pub fn texture_cube_texture_cube4(
                this: *mut root::gli::texture_cube,
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture_cube view, reference a subset of an existing texture_cube instance"]
            #[link_name = "\u{1}texture_cube"]
            pub fn texture_cube_texture_cube5(
                this: *mut root::gli::texture_cube,
                Texture: *const root::gli::texture_cube,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            );
        }
        impl Default for texture_cube {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture_cube {
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_cube_extent_type {
                texture_cube_extent(self, Level)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_texture_cube(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_extent_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_texture_cube1(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Levels,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_extent_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_texture_cube2(__bindgen_tmp.as_mut_ptr(), Format, Extent, Swizzles);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(Texture: *const root::gli::texture) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_texture_cube3(__bindgen_tmp.as_mut_ptr(), Texture);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_texture_cube4(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(
                Texture: *const root::gli::texture_cube,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_texture_cube5(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " Cube map array texture"]
        #[repr(C)]
        pub struct texture_cube_array {
            pub _base: root::gli::texture,
        }
        pub type texture_cube_array_extent_type = root::gli::extent2d;
        extern "C" {
            #[doc = " Return the dimensions of a texture instance: width and height where both should be equal."]
            #[link_name = "\u{1}extent"]
            pub fn texture_cube_array_extent(
                this: *const root::gli::texture_cube_array,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_cube_array_extent_type;
        }
        extern "C" {
            #[doc = " Create an empty texture cube array"]
            #[link_name = "\u{1}texture_cube_array"]
            pub fn texture_cube_array_texture_cube_array(this: *mut root::gli::texture_cube_array);
        }
        extern "C" {
            #[doc = " Create a texture_cube_array and allocate a new storage_linear"]
            #[link_name = "\u{1}texture_cube_array"]
            pub fn texture_cube_array_texture_cube_array1(
                this: *mut root::gli::texture_cube_array,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_array_extent_type,
                Layers: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture_cube_array and allocate a new storage_linear with a complete mipmap chain"]
            #[link_name = "\u{1}texture_cube_array"]
            pub fn texture_cube_array_texture_cube_array2(
                this: *mut root::gli::texture_cube_array,
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_array_extent_type,
                Layers: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture_cube_array view with an existing storage_linear"]
            #[link_name = "\u{1}texture_cube_array"]
            pub fn texture_cube_array_texture_cube_array3(
                this: *mut root::gli::texture_cube_array,
                Texture: *const root::gli::texture,
            );
        }
        extern "C" {
            #[doc = " Reference a subset of an exiting storage_linear constructor"]
            #[link_name = "\u{1}texture_cube_array"]
            pub fn texture_cube_array_texture_cube_array4(
                this: *mut root::gli::texture_cube_array,
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            );
        }
        extern "C" {
            #[doc = " Create a texture view, reference a subset of an exiting texture_cube_array instance"]
            #[link_name = "\u{1}texture_cube_array"]
            pub fn texture_cube_array_texture_cube_array5(
                this: *mut root::gli::texture_cube_array,
                Texture: *const root::gli::texture_cube_array,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            );
        }
        impl Default for texture_cube_array {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl texture_cube_array {
            #[inline]
            pub unsafe fn extent(
                &self,
                Level: root::gli::texture_size_type,
            ) -> root::gli::texture_cube_array_extent_type {
                texture_cube_array_extent(self, Level)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_array_texture_cube_array(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_array_extent_type,
                Layers: root::gli::texture_size_type,
                Levels: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_array_texture_cube_array1(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Layers,
                    Levels,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                Format: root::gli::texture_format_type,
                Extent: *const root::gli::texture_cube_array_extent_type,
                Layers: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_array_texture_cube_array2(
                    __bindgen_tmp.as_mut_ptr(),
                    Format,
                    Extent,
                    Layers,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(Texture: *const root::gli::texture) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_array_texture_cube_array3(__bindgen_tmp.as_mut_ptr(), Texture);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                Texture: *const root::gli::texture,
                Format: root::gli::texture_format_type,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
                Swizzles: *const root::gli::texture_swizzles_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_array_texture_cube_array4(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    Format,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                    Swizzles,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(
                Texture: *const root::gli::texture_cube_array,
                BaseLayer: root::gli::texture_size_type,
                MaxLayer: root::gli::texture_size_type,
                BaseFace: root::gli::texture_size_type,
                MaxFace: root::gli::texture_size_type,
                BaseLevel: root::gli::texture_size_type,
                MaxLevel: root::gli::texture_size_type,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                texture_cube_array_texture_cube_array5(
                    __bindgen_tmp.as_mut_ptr(),
                    Texture,
                    BaseLayer,
                    MaxLayer,
                    BaseFace,
                    MaxFace,
                    BaseLevel,
                    MaxLevel,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " Translation class to convert GLI enums into OpenGL values"]
        #[repr(C)]
        pub struct gl {
            pub FormatDesc: [u32; 836usize],
            pub Profile: root::gli::gl_profile,
        }
        pub const gl_internal_format_INTERNAL_RGB_UNORM: root::gli::gl_internal_format = 6407;
        pub const gl_internal_format_INTERNAL_BGR_UNORM: root::gli::gl_internal_format = 32992;
        pub const gl_internal_format_INTERNAL_RGBA_UNORM: root::gli::gl_internal_format = 6408;
        pub const gl_internal_format_INTERNAL_BGRA_UNORM: root::gli::gl_internal_format = 32993;
        pub const gl_internal_format_INTERNAL_BGRA8_UNORM: root::gli::gl_internal_format = 37793;
        pub const gl_internal_format_INTERNAL_R8_UNORM: root::gli::gl_internal_format = 33321;
        pub const gl_internal_format_INTERNAL_RG8_UNORM: root::gli::gl_internal_format = 33323;
        pub const gl_internal_format_INTERNAL_RGB8_UNORM: root::gli::gl_internal_format = 32849;
        pub const gl_internal_format_INTERNAL_RGBA8_UNORM: root::gli::gl_internal_format = 32856;
        pub const gl_internal_format_INTERNAL_R16_UNORM: root::gli::gl_internal_format = 33322;
        pub const gl_internal_format_INTERNAL_RG16_UNORM: root::gli::gl_internal_format = 33324;
        pub const gl_internal_format_INTERNAL_RGB16_UNORM: root::gli::gl_internal_format = 32852;
        pub const gl_internal_format_INTERNAL_RGBA16_UNORM: root::gli::gl_internal_format = 32859;
        pub const gl_internal_format_INTERNAL_RGB10A2_UNORM: root::gli::gl_internal_format = 32857;
        pub const gl_internal_format_INTERNAL_RGB10A2_SNORM_EXT: root::gli::gl_internal_format =
            65532;
        pub const gl_internal_format_INTERNAL_R8_SNORM: root::gli::gl_internal_format = 36756;
        pub const gl_internal_format_INTERNAL_RG8_SNORM: root::gli::gl_internal_format = 36757;
        pub const gl_internal_format_INTERNAL_RGB8_SNORM: root::gli::gl_internal_format = 36758;
        pub const gl_internal_format_INTERNAL_RGBA8_SNORM: root::gli::gl_internal_format = 36759;
        pub const gl_internal_format_INTERNAL_R16_SNORM: root::gli::gl_internal_format = 36760;
        pub const gl_internal_format_INTERNAL_RG16_SNORM: root::gli::gl_internal_format = 36761;
        pub const gl_internal_format_INTERNAL_RGB16_SNORM: root::gli::gl_internal_format = 36762;
        pub const gl_internal_format_INTERNAL_RGBA16_SNORM: root::gli::gl_internal_format = 36763;
        pub const gl_internal_format_INTERNAL_R8U: root::gli::gl_internal_format = 33330;
        pub const gl_internal_format_INTERNAL_RG8U: root::gli::gl_internal_format = 33336;
        pub const gl_internal_format_INTERNAL_RGB8U: root::gli::gl_internal_format = 36221;
        pub const gl_internal_format_INTERNAL_RGBA8U: root::gli::gl_internal_format = 36220;
        pub const gl_internal_format_INTERNAL_R16U: root::gli::gl_internal_format = 33332;
        pub const gl_internal_format_INTERNAL_RG16U: root::gli::gl_internal_format = 33338;
        pub const gl_internal_format_INTERNAL_RGB16U: root::gli::gl_internal_format = 36215;
        pub const gl_internal_format_INTERNAL_RGBA16U: root::gli::gl_internal_format = 36214;
        pub const gl_internal_format_INTERNAL_R32U: root::gli::gl_internal_format = 33334;
        pub const gl_internal_format_INTERNAL_RG32U: root::gli::gl_internal_format = 33340;
        pub const gl_internal_format_INTERNAL_RGB32U: root::gli::gl_internal_format = 36209;
        pub const gl_internal_format_INTERNAL_RGBA32U: root::gli::gl_internal_format = 36208;
        pub const gl_internal_format_INTERNAL_RGB10A2U: root::gli::gl_internal_format = 36975;
        pub const gl_internal_format_INTERNAL_RGB10A2I_EXT: root::gli::gl_internal_format = 65531;
        pub const gl_internal_format_INTERNAL_R8I: root::gli::gl_internal_format = 33329;
        pub const gl_internal_format_INTERNAL_RG8I: root::gli::gl_internal_format = 33335;
        pub const gl_internal_format_INTERNAL_RGB8I: root::gli::gl_internal_format = 36239;
        pub const gl_internal_format_INTERNAL_RGBA8I: root::gli::gl_internal_format = 36238;
        pub const gl_internal_format_INTERNAL_R16I: root::gli::gl_internal_format = 33331;
        pub const gl_internal_format_INTERNAL_RG16I: root::gli::gl_internal_format = 33337;
        pub const gl_internal_format_INTERNAL_RGB16I: root::gli::gl_internal_format = 36233;
        pub const gl_internal_format_INTERNAL_RGBA16I: root::gli::gl_internal_format = 36232;
        pub const gl_internal_format_INTERNAL_R32I: root::gli::gl_internal_format = 33333;
        pub const gl_internal_format_INTERNAL_RG32I: root::gli::gl_internal_format = 33339;
        pub const gl_internal_format_INTERNAL_RGB32I: root::gli::gl_internal_format = 36227;
        pub const gl_internal_format_INTERNAL_RGBA32I: root::gli::gl_internal_format = 36226;
        pub const gl_internal_format_INTERNAL_R16F: root::gli::gl_internal_format = 33325;
        pub const gl_internal_format_INTERNAL_RG16F: root::gli::gl_internal_format = 33327;
        pub const gl_internal_format_INTERNAL_RGB16F: root::gli::gl_internal_format = 34843;
        pub const gl_internal_format_INTERNAL_RGBA16F: root::gli::gl_internal_format = 34842;
        pub const gl_internal_format_INTERNAL_R32F: root::gli::gl_internal_format = 33326;
        pub const gl_internal_format_INTERNAL_RG32F: root::gli::gl_internal_format = 33328;
        pub const gl_internal_format_INTERNAL_RGB32F: root::gli::gl_internal_format = 34837;
        pub const gl_internal_format_INTERNAL_RGBA32F: root::gli::gl_internal_format = 34836;
        pub const gl_internal_format_INTERNAL_R64F_EXT: root::gli::gl_internal_format = 65530;
        pub const gl_internal_format_INTERNAL_RG64F_EXT: root::gli::gl_internal_format = 65529;
        pub const gl_internal_format_INTERNAL_RGB64F_EXT: root::gli::gl_internal_format = 65528;
        pub const gl_internal_format_INTERNAL_RGBA64F_EXT: root::gli::gl_internal_format = 65527;
        pub const gl_internal_format_INTERNAL_SR8: root::gli::gl_internal_format = 36797;
        pub const gl_internal_format_INTERNAL_SRG8: root::gli::gl_internal_format = 36798;
        pub const gl_internal_format_INTERNAL_SRGB8: root::gli::gl_internal_format = 35905;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8: root::gli::gl_internal_format = 35907;
        pub const gl_internal_format_INTERNAL_RGB9E5: root::gli::gl_internal_format = 35901;
        pub const gl_internal_format_INTERNAL_RG11B10F: root::gli::gl_internal_format = 35898;
        pub const gl_internal_format_INTERNAL_RG3B2: root::gli::gl_internal_format = 10768;
        pub const gl_internal_format_INTERNAL_R5G6B5: root::gli::gl_internal_format = 36194;
        pub const gl_internal_format_INTERNAL_RGB5A1: root::gli::gl_internal_format = 32855;
        pub const gl_internal_format_INTERNAL_RGBA4: root::gli::gl_internal_format = 32854;
        pub const gl_internal_format_INTERNAL_RG4_EXT: root::gli::gl_internal_format = 65534;
        pub const gl_internal_format_INTERNAL_LA4: root::gli::gl_internal_format = 32835;
        pub const gl_internal_format_INTERNAL_L8: root::gli::gl_internal_format = 32832;
        pub const gl_internal_format_INTERNAL_A8: root::gli::gl_internal_format = 32828;
        pub const gl_internal_format_INTERNAL_LA8: root::gli::gl_internal_format = 32837;
        pub const gl_internal_format_INTERNAL_L16: root::gli::gl_internal_format = 32834;
        pub const gl_internal_format_INTERNAL_A16: root::gli::gl_internal_format = 32830;
        pub const gl_internal_format_INTERNAL_LA16: root::gli::gl_internal_format = 32840;
        pub const gl_internal_format_INTERNAL_D16: root::gli::gl_internal_format = 33189;
        pub const gl_internal_format_INTERNAL_D24: root::gli::gl_internal_format = 33190;
        pub const gl_internal_format_INTERNAL_D16S8_EXT: root::gli::gl_internal_format = 65526;
        pub const gl_internal_format_INTERNAL_D24S8: root::gli::gl_internal_format = 35056;
        pub const gl_internal_format_INTERNAL_D32: root::gli::gl_internal_format = 33191;
        pub const gl_internal_format_INTERNAL_D32F: root::gli::gl_internal_format = 36012;
        pub const gl_internal_format_INTERNAL_D32FS8X24: root::gli::gl_internal_format = 36013;
        pub const gl_internal_format_INTERNAL_S8_EXT: root::gli::gl_internal_format = 36168;
        pub const gl_internal_format_INTERNAL_RGB_DXT1: root::gli::gl_internal_format = 33776;
        pub const gl_internal_format_INTERNAL_RGBA_DXT1: root::gli::gl_internal_format = 33777;
        pub const gl_internal_format_INTERNAL_RGBA_DXT3: root::gli::gl_internal_format = 33778;
        pub const gl_internal_format_INTERNAL_RGBA_DXT5: root::gli::gl_internal_format = 33779;
        pub const gl_internal_format_INTERNAL_R_ATI1N_UNORM: root::gli::gl_internal_format = 36283;
        pub const gl_internal_format_INTERNAL_R_ATI1N_SNORM: root::gli::gl_internal_format = 36284;
        pub const gl_internal_format_INTERNAL_RG_ATI2N_UNORM: root::gli::gl_internal_format = 36285;
        pub const gl_internal_format_INTERNAL_RG_ATI2N_SNORM: root::gli::gl_internal_format = 36286;
        pub const gl_internal_format_INTERNAL_RGB_BP_UNSIGNED_FLOAT: root::gli::gl_internal_format =
            36495;
        pub const gl_internal_format_INTERNAL_RGB_BP_SIGNED_FLOAT: root::gli::gl_internal_format =
            36494;
        pub const gl_internal_format_INTERNAL_RGB_BP_UNORM: root::gli::gl_internal_format = 36492;
        pub const gl_internal_format_INTERNAL_RGB_PVRTC_4BPPV1: root::gli::gl_internal_format =
            35840;
        pub const gl_internal_format_INTERNAL_RGB_PVRTC_2BPPV1: root::gli::gl_internal_format =
            35841;
        pub const gl_internal_format_INTERNAL_RGBA_PVRTC_4BPPV1: root::gli::gl_internal_format =
            35842;
        pub const gl_internal_format_INTERNAL_RGBA_PVRTC_2BPPV1: root::gli::gl_internal_format =
            35843;
        pub const gl_internal_format_INTERNAL_RGBA_PVRTC_4BPPV2: root::gli::gl_internal_format =
            37175;
        pub const gl_internal_format_INTERNAL_RGBA_PVRTC_2BPPV2: root::gli::gl_internal_format =
            37176;
        pub const gl_internal_format_INTERNAL_ATC_RGB: root::gli::gl_internal_format = 35986;
        pub const gl_internal_format_INTERNAL_ATC_RGBA_EXPLICIT_ALPHA:
            root::gli::gl_internal_format = 35987;
        pub const gl_internal_format_INTERNAL_ATC_RGBA_INTERPOLATED_ALPHA:
            root::gli::gl_internal_format = 34798;
        pub const gl_internal_format_INTERNAL_RGB_ETC: root::gli::gl_internal_format = 36196;
        pub const gl_internal_format_INTERNAL_RGB_ETC2: root::gli::gl_internal_format = 37492;
        pub const gl_internal_format_INTERNAL_RGBA_PUNCHTHROUGH_ETC2:
            root::gli::gl_internal_format = 37494;
        pub const gl_internal_format_INTERNAL_RGBA_ETC2: root::gli::gl_internal_format = 37496;
        pub const gl_internal_format_INTERNAL_R11_EAC: root::gli::gl_internal_format = 37488;
        pub const gl_internal_format_INTERNAL_SIGNED_R11_EAC: root::gli::gl_internal_format = 37489;
        pub const gl_internal_format_INTERNAL_RG11_EAC: root::gli::gl_internal_format = 37490;
        pub const gl_internal_format_INTERNAL_SIGNED_RG11_EAC: root::gli::gl_internal_format =
            37491;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_4x4: root::gli::gl_internal_format = 37808;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_5x4: root::gli::gl_internal_format = 37809;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_5x5: root::gli::gl_internal_format = 37810;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_6x5: root::gli::gl_internal_format = 37811;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_6x6: root::gli::gl_internal_format = 37812;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_8x5: root::gli::gl_internal_format = 37813;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_8x6: root::gli::gl_internal_format = 37814;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_8x8: root::gli::gl_internal_format = 37815;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_10x5: root::gli::gl_internal_format = 37816;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_10x6: root::gli::gl_internal_format = 37817;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_10x8: root::gli::gl_internal_format = 37818;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_10x10: root::gli::gl_internal_format =
            37819;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_12x10: root::gli::gl_internal_format =
            37820;
        pub const gl_internal_format_INTERNAL_RGBA_ASTC_12x12: root::gli::gl_internal_format =
            37821;
        pub const gl_internal_format_INTERNAL_SRGB_DXT1: root::gli::gl_internal_format = 35916;
        pub const gl_internal_format_INTERNAL_SRGB_ALPHA_DXT1: root::gli::gl_internal_format =
            35917;
        pub const gl_internal_format_INTERNAL_SRGB_ALPHA_DXT3: root::gli::gl_internal_format =
            35918;
        pub const gl_internal_format_INTERNAL_SRGB_ALPHA_DXT5: root::gli::gl_internal_format =
            35919;
        pub const gl_internal_format_INTERNAL_SRGB_BP_UNORM: root::gli::gl_internal_format = 36493;
        pub const gl_internal_format_INTERNAL_SRGB_PVRTC_2BPPV1: root::gli::gl_internal_format =
            35412;
        pub const gl_internal_format_INTERNAL_SRGB_PVRTC_4BPPV1: root::gli::gl_internal_format =
            35413;
        pub const gl_internal_format_INTERNAL_SRGB_ALPHA_PVRTC_2BPPV1:
            root::gli::gl_internal_format = 35414;
        pub const gl_internal_format_INTERNAL_SRGB_ALPHA_PVRTC_4BPPV1:
            root::gli::gl_internal_format = 35415;
        pub const gl_internal_format_INTERNAL_SRGB_ALPHA_PVRTC_2BPPV2:
            root::gli::gl_internal_format = 37872;
        pub const gl_internal_format_INTERNAL_SRGB_ALPHA_PVRTC_4BPPV2:
            root::gli::gl_internal_format = 37873;
        pub const gl_internal_format_INTERNAL_SRGB8_ETC2: root::gli::gl_internal_format = 37493;
        pub const gl_internal_format_INTERNAL_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:
            root::gli::gl_internal_format = 37495;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ETC2_EAC: root::gli::gl_internal_format =
            37497;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_4x4: root::gli::gl_internal_format =
            37840;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_5x4: root::gli::gl_internal_format =
            37841;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_5x5: root::gli::gl_internal_format =
            37842;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_6x5: root::gli::gl_internal_format =
            37843;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_6x6: root::gli::gl_internal_format =
            37844;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_8x5: root::gli::gl_internal_format =
            37845;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_8x6: root::gli::gl_internal_format =
            37846;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_8x8: root::gli::gl_internal_format =
            37847;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_10x5:
            root::gli::gl_internal_format = 37848;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_10x6:
            root::gli::gl_internal_format = 37849;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_10x8:
            root::gli::gl_internal_format = 37850;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_10x10:
            root::gli::gl_internal_format = 37851;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_12x10:
            root::gli::gl_internal_format = 37852;
        pub const gl_internal_format_INTERNAL_SRGB8_ALPHA8_ASTC_12x12:
            root::gli::gl_internal_format = 37853;
        pub const gl_internal_format_INTERNAL_ALPHA8: root::gli::gl_internal_format = 32828;
        pub const gl_internal_format_INTERNAL_ALPHA16: root::gli::gl_internal_format = 32830;
        pub const gl_internal_format_INTERNAL_LUMINANCE8: root::gli::gl_internal_format = 32832;
        pub const gl_internal_format_INTERNAL_LUMINANCE16: root::gli::gl_internal_format = 32834;
        pub const gl_internal_format_INTERNAL_LUMINANCE8_ALPHA8: root::gli::gl_internal_format =
            32837;
        pub const gl_internal_format_INTERNAL_LUMINANCE16_ALPHA16: root::gli::gl_internal_format =
            32840;
        pub const gl_internal_format_INTERNAL_R8_USCALED_GTC: root::gli::gl_internal_format = 61440;
        pub const gl_internal_format_INTERNAL_R8_SSCALED_GTC: root::gli::gl_internal_format = 61441;
        pub const gl_internal_format_INTERNAL_RG8_USCALED_GTC: root::gli::gl_internal_format =
            61442;
        pub const gl_internal_format_INTERNAL_RG8_SSCALED_GTC: root::gli::gl_internal_format =
            61443;
        pub const gl_internal_format_INTERNAL_RGB8_USCALED_GTC: root::gli::gl_internal_format =
            61444;
        pub const gl_internal_format_INTERNAL_RGB8_SSCALED_GTC: root::gli::gl_internal_format =
            61445;
        pub const gl_internal_format_INTERNAL_RGBA8_USCALED_GTC: root::gli::gl_internal_format =
            61446;
        pub const gl_internal_format_INTERNAL_RGBA8_SSCALED_GTC: root::gli::gl_internal_format =
            61447;
        pub const gl_internal_format_INTERNAL_RGB10A2_USCALED_GTC: root::gli::gl_internal_format =
            61448;
        pub const gl_internal_format_INTERNAL_RGB10A2_SSCALED_GTC: root::gli::gl_internal_format =
            61449;
        pub const gl_internal_format_INTERNAL_R16_USCALED_GTC: root::gli::gl_internal_format =
            61450;
        pub const gl_internal_format_INTERNAL_R16_SSCALED_GTC: root::gli::gl_internal_format =
            61451;
        pub const gl_internal_format_INTERNAL_RG16_USCALED_GTC: root::gli::gl_internal_format =
            61452;
        pub const gl_internal_format_INTERNAL_RG16_SSCALED_GTC: root::gli::gl_internal_format =
            61453;
        pub const gl_internal_format_INTERNAL_RGB16_USCALED_GTC: root::gli::gl_internal_format =
            61454;
        pub const gl_internal_format_INTERNAL_RGB16_SSCALED_GTC: root::gli::gl_internal_format =
            61455;
        pub const gl_internal_format_INTERNAL_RGBA16_USCALED_GTC: root::gli::gl_internal_format =
            61456;
        pub const gl_internal_format_INTERNAL_RGBA16_SSCALED_GTC: root::gli::gl_internal_format =
            61457;
        pub type gl_internal_format = u32;
        pub const gl_external_format_EXTERNAL_NONE: root::gli::gl_external_format = 0;
        pub const gl_external_format_EXTERNAL_RED: root::gli::gl_external_format = 6403;
        pub const gl_external_format_EXTERNAL_RG: root::gli::gl_external_format = 33319;
        pub const gl_external_format_EXTERNAL_RGB: root::gli::gl_external_format = 6407;
        pub const gl_external_format_EXTERNAL_BGR: root::gli::gl_external_format = 32992;
        pub const gl_external_format_EXTERNAL_RGBA: root::gli::gl_external_format = 6408;
        pub const gl_external_format_EXTERNAL_BGRA: root::gli::gl_external_format = 32993;
        pub const gl_external_format_EXTERNAL_RED_INTEGER: root::gli::gl_external_format = 36244;
        pub const gl_external_format_EXTERNAL_RG_INTEGER: root::gli::gl_external_format = 33320;
        pub const gl_external_format_EXTERNAL_RGB_INTEGER: root::gli::gl_external_format = 36248;
        pub const gl_external_format_EXTERNAL_BGR_INTEGER: root::gli::gl_external_format = 36250;
        pub const gl_external_format_EXTERNAL_RGBA_INTEGER: root::gli::gl_external_format = 36249;
        pub const gl_external_format_EXTERNAL_BGRA_INTEGER: root::gli::gl_external_format = 36251;
        pub const gl_external_format_EXTERNAL_DEPTH: root::gli::gl_external_format = 6402;
        pub const gl_external_format_EXTERNAL_DEPTH_STENCIL: root::gli::gl_external_format = 34041;
        pub const gl_external_format_EXTERNAL_STENCIL: root::gli::gl_external_format = 6401;
        pub const gl_external_format_EXTERNAL_LUMINANCE: root::gli::gl_external_format = 6409;
        pub const gl_external_format_EXTERNAL_ALPHA: root::gli::gl_external_format = 6406;
        pub const gl_external_format_EXTERNAL_LUMINANCE_ALPHA: root::gli::gl_external_format = 6410;
        pub const gl_external_format_EXTERNAL_SRGB_EXT: root::gli::gl_external_format = 35904;
        pub const gl_external_format_EXTERNAL_SRGB_ALPHA_EXT: root::gli::gl_external_format = 35906;
        pub type gl_external_format = u32;
        pub const gl_type_format_TYPE_NONE: root::gli::gl_type_format = 0;
        pub const gl_type_format_TYPE_I8: root::gli::gl_type_format = 5120;
        pub const gl_type_format_TYPE_U8: root::gli::gl_type_format = 5121;
        pub const gl_type_format_TYPE_I16: root::gli::gl_type_format = 5122;
        pub const gl_type_format_TYPE_U16: root::gli::gl_type_format = 5123;
        pub const gl_type_format_TYPE_I32: root::gli::gl_type_format = 5124;
        pub const gl_type_format_TYPE_U32: root::gli::gl_type_format = 5125;
        pub const gl_type_format_TYPE_I64: root::gli::gl_type_format = 5134;
        pub const gl_type_format_TYPE_U64: root::gli::gl_type_format = 5135;
        pub const gl_type_format_TYPE_F16: root::gli::gl_type_format = 5131;
        pub const gl_type_format_TYPE_F16_OES: root::gli::gl_type_format = 36193;
        pub const gl_type_format_TYPE_F32: root::gli::gl_type_format = 5126;
        pub const gl_type_format_TYPE_F64: root::gli::gl_type_format = 5130;
        pub const gl_type_format_TYPE_UINT32_RGB9_E5_REV: root::gli::gl_type_format = 35902;
        pub const gl_type_format_TYPE_UINT32_RG11B10F_REV: root::gli::gl_type_format = 35899;
        pub const gl_type_format_TYPE_UINT8_RG3B2: root::gli::gl_type_format = 32818;
        pub const gl_type_format_TYPE_UINT8_RG3B2_REV: root::gli::gl_type_format = 33634;
        pub const gl_type_format_TYPE_UINT16_RGB5A1: root::gli::gl_type_format = 32820;
        pub const gl_type_format_TYPE_UINT16_RGB5A1_REV: root::gli::gl_type_format = 33638;
        pub const gl_type_format_TYPE_UINT16_R5G6B5: root::gli::gl_type_format = 33635;
        pub const gl_type_format_TYPE_UINT16_R5G6B5_REV: root::gli::gl_type_format = 33636;
        pub const gl_type_format_TYPE_UINT16_RGBA4: root::gli::gl_type_format = 32819;
        pub const gl_type_format_TYPE_UINT16_RGBA4_REV: root::gli::gl_type_format = 33637;
        pub const gl_type_format_TYPE_UINT32_RGBA8: root::gli::gl_type_format = 32821;
        pub const gl_type_format_TYPE_UINT32_RGBA8_REV: root::gli::gl_type_format = 33639;
        pub const gl_type_format_TYPE_UINT32_RGB10A2: root::gli::gl_type_format = 32822;
        pub const gl_type_format_TYPE_UINT32_RGB10A2_REV: root::gli::gl_type_format = 33640;
        pub const gl_type_format_TYPE_UINT8_RG4_REV_GTC: root::gli::gl_type_format = 65533;
        pub const gl_type_format_TYPE_UINT16_A1RGB5_GTC: root::gli::gl_type_format = 65532;
        pub type gl_type_format = u32;
        pub const gl_target_TARGET_1D: root::gli::gl_target = 3552;
        pub const gl_target_TARGET_1D_ARRAY: root::gli::gl_target = 35864;
        pub const gl_target_TARGET_2D: root::gli::gl_target = 3553;
        pub const gl_target_TARGET_2D_ARRAY: root::gli::gl_target = 35866;
        pub const gl_target_TARGET_3D: root::gli::gl_target = 32879;
        pub const gl_target_TARGET_RECT: root::gli::gl_target = 34037;
        pub const gl_target_TARGET_RECT_ARRAY: root::gli::gl_target = 34037;
        pub const gl_target_TARGET_CUBE: root::gli::gl_target = 34067;
        pub const gl_target_TARGET_CUBE_ARRAY: root::gli::gl_target = 36873;
        pub type gl_target = u32;
        pub const gl_swizzle_SWIZZLE_RED: root::gli::gl_swizzle = 6403;
        pub const gl_swizzle_SWIZZLE_GREEN: root::gli::gl_swizzle = 6404;
        pub const gl_swizzle_SWIZZLE_BLUE: root::gli::gl_swizzle = 6405;
        pub const gl_swizzle_SWIZZLE_ALPHA: root::gli::gl_swizzle = 6406;
        pub const gl_swizzle_SWIZZLE_ZERO: root::gli::gl_swizzle = 0;
        pub const gl_swizzle_SWIZZLE_ONE: root::gli::gl_swizzle = 1;
        pub type gl_swizzle = u32;
        pub const gl_profile_PROFILE_ES20: root::gli::gl_profile = 0;
        pub const gl_profile_PROFILE_ES30: root::gli::gl_profile = 1;
        pub const gl_profile_PROFILE_GL32: root::gli::gl_profile = 2;
        pub const gl_profile_PROFILE_GL33: root::gli::gl_profile = 3;
        pub const gl_profile_PROFILE_KTX: root::gli::gl_profile = 4;
        pub type gl_profile = u32;
        pub type gl_swizzles = [u32; 4usize];
        #[repr(C)]
        #[derive(Debug)]
        pub struct gl_format {
            pub Internal: root::gli::gl_internal_format,
            pub External: root::gli::gl_external_format,
            pub Type: root::gli::gl_type_format,
            pub Swizzles: root::gli::gl_swizzles,
        }
        impl Default for gl_format {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct gl_format_desc {
            pub Internal: root::gli::gl_internal_format,
            pub External: root::gli::gl_external_format,
            pub Type: root::gli::gl_type_format,
            pub Properties: ::std::os::raw::c_uint,
        }
        impl Default for gl_format_desc {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[doc = " Convert GLI targets into OpenGL texture targets"]
            #[link_name = "\u{1}translate"]
            pub fn gl_translate(
                this: *const root::gli::gl,
                Target: root::gli::target,
            ) -> *const root::gli::gl_target;
        }
        extern "C" {
            #[doc = " Convert GLI formats into OpenGL texture formats"]
            #[link_name = "\u{1}translate"]
            pub fn gl_translate1(
                this: *const root::gli::gl,
                Format: root::gli::format,
                Swizzle: *const root::gli::swizzles,
            ) -> root::gli::gl_format;
        }
        extern "C" {
            #[doc = " Convert an OpenGL format into a GLI format"]
            #[link_name = "\u{1}find"]
            pub fn gl_find(
                this: *mut root::gli::gl,
                InternalFormat: root::gli::gl_internal_format,
                ExternalFormat: root::gli::gl_external_format,
                Type: root::gli::gl_type_format,
            ) -> root::gli::format;
        }
        extern "C" {
            #[link_name = "\u{1}gl"]
            pub fn gl_gl(this: *mut root::gli::gl, Profile: root::gli::gl_profile);
        }
        impl Default for gl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl gl {
            #[inline]
            pub unsafe fn translate(
                &self,
                Target: root::gli::target,
            ) -> *const root::gli::gl_target {
                gl_translate(self, Target)
            }
            #[inline]
            pub unsafe fn translate1(
                &self,
                Format: root::gli::format,
                Swizzle: *const root::gli::swizzles,
            ) -> root::gli::gl_format {
                gl_translate1(self, Format, Swizzle)
            }
            #[inline]
            pub unsafe fn find(
                &mut self,
                InternalFormat: root::gli::gl_internal_format,
                ExternalFormat: root::gli::gl_external_format,
                Type: root::gli::gl_type_format,
            ) -> root::gli::format {
                gl_find(self, InternalFormat, ExternalFormat, Type)
            }
            #[inline]
            pub unsafe fn new(Profile: root::gli::gl_profile) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                gl_gl(__bindgen_tmp.as_mut_ptr(), Profile);
                __bindgen_tmp.assume_init()
            }
        }
        #[doc = " Translation class to convert GLI enums into DirectX enums"]
        #[repr(C)]
        pub struct dx {
            pub Translation: [u32; 1463usize],
        }
        pub const dx_d3dfmt_D3DFMT_UNKNOWN: root::gli::dx_d3dfmt = 0;
        pub const dx_d3dfmt_D3DFMT_R8G8B8: root::gli::dx_d3dfmt = 20;
        pub const dx_d3dfmt_D3DFMT_A8R8G8B8: root::gli::dx_d3dfmt = 21;
        pub const dx_d3dfmt_D3DFMT_X8R8G8B8: root::gli::dx_d3dfmt = 22;
        pub const dx_d3dfmt_D3DFMT_R5G6B5: root::gli::dx_d3dfmt = 23;
        pub const dx_d3dfmt_D3DFMT_X1R5G5B5: root::gli::dx_d3dfmt = 24;
        pub const dx_d3dfmt_D3DFMT_A1R5G5B5: root::gli::dx_d3dfmt = 25;
        pub const dx_d3dfmt_D3DFMT_A4R4G4B4: root::gli::dx_d3dfmt = 26;
        pub const dx_d3dfmt_D3DFMT_R3G3B2: root::gli::dx_d3dfmt = 27;
        pub const dx_d3dfmt_D3DFMT_A8: root::gli::dx_d3dfmt = 28;
        pub const dx_d3dfmt_D3DFMT_A8R3G3B2: root::gli::dx_d3dfmt = 29;
        pub const dx_d3dfmt_D3DFMT_X4R4G4B4: root::gli::dx_d3dfmt = 30;
        pub const dx_d3dfmt_D3DFMT_A2B10G10R10: root::gli::dx_d3dfmt = 31;
        pub const dx_d3dfmt_D3DFMT_A8B8G8R8: root::gli::dx_d3dfmt = 32;
        pub const dx_d3dfmt_D3DFMT_X8B8G8R8: root::gli::dx_d3dfmt = 33;
        pub const dx_d3dfmt_D3DFMT_G16R16: root::gli::dx_d3dfmt = 34;
        pub const dx_d3dfmt_D3DFMT_A2R10G10B10: root::gli::dx_d3dfmt = 35;
        pub const dx_d3dfmt_D3DFMT_A16B16G16R16: root::gli::dx_d3dfmt = 36;
        pub const dx_d3dfmt_D3DFMT_A8P8: root::gli::dx_d3dfmt = 40;
        pub const dx_d3dfmt_D3DFMT_P8: root::gli::dx_d3dfmt = 41;
        pub const dx_d3dfmt_D3DFMT_L8: root::gli::dx_d3dfmt = 50;
        pub const dx_d3dfmt_D3DFMT_A8L8: root::gli::dx_d3dfmt = 51;
        pub const dx_d3dfmt_D3DFMT_A4L4: root::gli::dx_d3dfmt = 52;
        pub const dx_d3dfmt_D3DFMT_V8U8: root::gli::dx_d3dfmt = 60;
        pub const dx_d3dfmt_D3DFMT_L6V5U5: root::gli::dx_d3dfmt = 61;
        pub const dx_d3dfmt_D3DFMT_X8L8V8U8: root::gli::dx_d3dfmt = 62;
        pub const dx_d3dfmt_D3DFMT_Q8W8V8U8: root::gli::dx_d3dfmt = 63;
        pub const dx_d3dfmt_D3DFMT_V16U16: root::gli::dx_d3dfmt = 64;
        pub const dx_d3dfmt_D3DFMT_A2W10V10U10: root::gli::dx_d3dfmt = 67;
        pub const dx_d3dfmt_D3DFMT_UYVY: root::gli::dx_d3dfmt = 1498831189;
        pub const dx_d3dfmt_D3DFMT_R8G8_B8G8: root::gli::dx_d3dfmt = 1195525970;
        pub const dx_d3dfmt_D3DFMT_YUY2: root::gli::dx_d3dfmt = 844715353;
        pub const dx_d3dfmt_D3DFMT_G8R8_G8B8: root::gli::dx_d3dfmt = 1111970375;
        pub const dx_d3dfmt_D3DFMT_DXT1: root::gli::dx_d3dfmt = 827611204;
        pub const dx_d3dfmt_D3DFMT_DXT2: root::gli::dx_d3dfmt = 844388420;
        pub const dx_d3dfmt_D3DFMT_DXT3: root::gli::dx_d3dfmt = 861165636;
        pub const dx_d3dfmt_D3DFMT_DXT4: root::gli::dx_d3dfmt = 877942852;
        pub const dx_d3dfmt_D3DFMT_DXT5: root::gli::dx_d3dfmt = 894720068;
        pub const dx_d3dfmt_D3DFMT_ATI1: root::gli::dx_d3dfmt = 826889281;
        pub const dx_d3dfmt_D3DFMT_AT1N: root::gli::dx_d3dfmt = 1311855681;
        pub const dx_d3dfmt_D3DFMT_ATI2: root::gli::dx_d3dfmt = 843666497;
        pub const dx_d3dfmt_D3DFMT_AT2N: root::gli::dx_d3dfmt = 1311921217;
        pub const dx_d3dfmt_D3DFMT_BC4U: root::gli::dx_d3dfmt = 1429488450;
        pub const dx_d3dfmt_D3DFMT_BC4S: root::gli::dx_d3dfmt = 1395934018;
        pub const dx_d3dfmt_D3DFMT_BC5U: root::gli::dx_d3dfmt = 1429553986;
        pub const dx_d3dfmt_D3DFMT_BC5S: root::gli::dx_d3dfmt = 1395999554;
        pub const dx_d3dfmt_D3DFMT_ETC: root::gli::dx_d3dfmt = 541283397;
        pub const dx_d3dfmt_D3DFMT_ETC1: root::gli::dx_d3dfmt = 826496069;
        pub const dx_d3dfmt_D3DFMT_ATC: root::gli::dx_d3dfmt = 541283393;
        pub const dx_d3dfmt_D3DFMT_ATCA: root::gli::dx_d3dfmt = 1094931521;
        pub const dx_d3dfmt_D3DFMT_ATCI: root::gli::dx_d3dfmt = 1229149249;
        pub const dx_d3dfmt_D3DFMT_POWERVR_2BPP: root::gli::dx_d3dfmt = 843273296;
        pub const dx_d3dfmt_D3DFMT_POWERVR_4BPP: root::gli::dx_d3dfmt = 876827728;
        pub const dx_d3dfmt_D3DFMT_D16_LOCKABLE: root::gli::dx_d3dfmt = 70;
        pub const dx_d3dfmt_D3DFMT_D32: root::gli::dx_d3dfmt = 71;
        pub const dx_d3dfmt_D3DFMT_D15S1: root::gli::dx_d3dfmt = 73;
        pub const dx_d3dfmt_D3DFMT_D24S8: root::gli::dx_d3dfmt = 75;
        pub const dx_d3dfmt_D3DFMT_D24X8: root::gli::dx_d3dfmt = 77;
        pub const dx_d3dfmt_D3DFMT_D24X4S4: root::gli::dx_d3dfmt = 79;
        pub const dx_d3dfmt_D3DFMT_D16: root::gli::dx_d3dfmt = 80;
        pub const dx_d3dfmt_D3DFMT_D32F_LOCKABLE: root::gli::dx_d3dfmt = 82;
        pub const dx_d3dfmt_D3DFMT_D24FS8: root::gli::dx_d3dfmt = 83;
        pub const dx_d3dfmt_D3DFMT_L16: root::gli::dx_d3dfmt = 81;
        pub const dx_d3dfmt_D3DFMT_VERTEXDATA: root::gli::dx_d3dfmt = 100;
        pub const dx_d3dfmt_D3DFMT_INDEX16: root::gli::dx_d3dfmt = 101;
        pub const dx_d3dfmt_D3DFMT_INDEX32: root::gli::dx_d3dfmt = 102;
        pub const dx_d3dfmt_D3DFMT_Q16W16V16U16: root::gli::dx_d3dfmt = 110;
        pub const dx_d3dfmt_D3DFMT_MULTI2_ARGB8: root::gli::dx_d3dfmt = 827606349;
        pub const dx_d3dfmt_D3DFMT_R16F: root::gli::dx_d3dfmt = 111;
        pub const dx_d3dfmt_D3DFMT_G16R16F: root::gli::dx_d3dfmt = 112;
        pub const dx_d3dfmt_D3DFMT_A16B16G16R16F: root::gli::dx_d3dfmt = 113;
        pub const dx_d3dfmt_D3DFMT_R32F: root::gli::dx_d3dfmt = 114;
        pub const dx_d3dfmt_D3DFMT_G32R32F: root::gli::dx_d3dfmt = 115;
        pub const dx_d3dfmt_D3DFMT_A32B32G32R32F: root::gli::dx_d3dfmt = 116;
        pub const dx_d3dfmt_D3DFMT_CxV8U8: root::gli::dx_d3dfmt = 117;
        pub const dx_d3dfmt_D3DFMT_DX10: root::gli::dx_d3dfmt = 808540228;
        pub const dx_d3dfmt_D3DFMT_GLI1: root::gli::dx_d3dfmt = 826887239;
        pub const dx_d3dfmt_D3DFMT_FORCE_DWORD: root::gli::dx_d3dfmt = 2147483647;
        pub type dx_d3dfmt = u32;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_UNKNOWN: root::gli::dx_dxgi_format_dds = 0;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32A32_TYPELESS:
            root::gli::dx_dxgi_format_dds = 1;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32A32_FLOAT: root::gli::dx_dxgi_format_dds =
            2;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32A32_UINT: root::gli::dx_dxgi_format_dds =
            3;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32A32_SINT: root::gli::dx_dxgi_format_dds =
            4;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32_TYPELESS: root::gli::dx_dxgi_format_dds =
            5;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32_FLOAT: root::gli::dx_dxgi_format_dds = 6;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32_UINT: root::gli::dx_dxgi_format_dds = 7;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32B32_SINT: root::gli::dx_dxgi_format_dds = 8;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16B16A16_TYPELESS:
            root::gli::dx_dxgi_format_dds = 9;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16B16A16_FLOAT: root::gli::dx_dxgi_format_dds =
            10;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16B16A16_UNORM: root::gli::dx_dxgi_format_dds =
            11;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16B16A16_UINT: root::gli::dx_dxgi_format_dds =
            12;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16B16A16_SNORM: root::gli::dx_dxgi_format_dds =
            13;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16B16A16_SINT: root::gli::dx_dxgi_format_dds =
            14;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32_TYPELESS: root::gli::dx_dxgi_format_dds =
            15;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32_FLOAT: root::gli::dx_dxgi_format_dds = 16;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32_UINT: root::gli::dx_dxgi_format_dds = 17;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G32_SINT: root::gli::dx_dxgi_format_dds = 18;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32G8X24_TYPELESS: root::gli::dx_dxgi_format_dds =
            19;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
            root::gli::dx_dxgi_format_dds = 20;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
            root::gli::dx_dxgi_format_dds = 21;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
            root::gli::dx_dxgi_format_dds = 22;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R10G10B10A2_TYPELESS:
            root::gli::dx_dxgi_format_dds = 23;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R10G10B10A2_UNORM: root::gli::dx_dxgi_format_dds =
            24;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R10G10B10A2_UINT: root::gli::dx_dxgi_format_dds =
            25;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R11G11B10_FLOAT: root::gli::dx_dxgi_format_dds =
            26;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8B8A8_TYPELESS: root::gli::dx_dxgi_format_dds =
            27;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8B8A8_UNORM: root::gli::dx_dxgi_format_dds = 28;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 29;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8B8A8_UINT: root::gli::dx_dxgi_format_dds = 30;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8B8A8_SNORM: root::gli::dx_dxgi_format_dds = 31;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8B8A8_SINT: root::gli::dx_dxgi_format_dds = 32;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16_TYPELESS: root::gli::dx_dxgi_format_dds =
            33;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16_FLOAT: root::gli::dx_dxgi_format_dds = 34;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16_UNORM: root::gli::dx_dxgi_format_dds = 35;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16_UINT: root::gli::dx_dxgi_format_dds = 36;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16_SNORM: root::gli::dx_dxgi_format_dds = 37;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16G16_SINT: root::gli::dx_dxgi_format_dds = 38;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32_TYPELESS: root::gli::dx_dxgi_format_dds = 39;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_D32_FLOAT: root::gli::dx_dxgi_format_dds = 40;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32_FLOAT: root::gli::dx_dxgi_format_dds = 41;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32_UINT: root::gli::dx_dxgi_format_dds = 42;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R32_SINT: root::gli::dx_dxgi_format_dds = 43;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R24G8_TYPELESS: root::gli::dx_dxgi_format_dds = 44;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_D24_UNORM_S8_UINT: root::gli::dx_dxgi_format_dds =
            45;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
            root::gli::dx_dxgi_format_dds = 46;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_X24_TYPELESS_G8_UINT:
            root::gli::dx_dxgi_format_dds = 47;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8_TYPELESS: root::gli::dx_dxgi_format_dds = 48;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8_UNORM: root::gli::dx_dxgi_format_dds = 49;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8_UINT: root::gli::dx_dxgi_format_dds = 50;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8_SNORM: root::gli::dx_dxgi_format_dds = 51;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8_SINT: root::gli::dx_dxgi_format_dds = 52;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16_TYPELESS: root::gli::dx_dxgi_format_dds = 53;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16_FLOAT: root::gli::dx_dxgi_format_dds = 54;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_D16_UNORM: root::gli::dx_dxgi_format_dds = 55;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16_UNORM: root::gli::dx_dxgi_format_dds = 56;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16_UINT: root::gli::dx_dxgi_format_dds = 57;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16_SNORM: root::gli::dx_dxgi_format_dds = 58;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R16_SINT: root::gli::dx_dxgi_format_dds = 59;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8_TYPELESS: root::gli::dx_dxgi_format_dds = 60;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8_UNORM: root::gli::dx_dxgi_format_dds = 61;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8_UINT: root::gli::dx_dxgi_format_dds = 62;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8_SNORM: root::gli::dx_dxgi_format_dds = 63;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8_SINT: root::gli::dx_dxgi_format_dds = 64;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_A8_UNORM: root::gli::dx_dxgi_format_dds = 65;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R1_UNORM: root::gli::dx_dxgi_format_dds = 66;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R9G9B9E5_SHAREDEXP: root::gli::dx_dxgi_format_dds =
            67;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R8G8_B8G8_UNORM: root::gli::dx_dxgi_format_dds =
            68;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_G8R8_G8B8_UNORM: root::gli::dx_dxgi_format_dds =
            69;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC1_TYPELESS: root::gli::dx_dxgi_format_dds = 70;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC1_UNORM: root::gli::dx_dxgi_format_dds = 71;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC1_UNORM_SRGB: root::gli::dx_dxgi_format_dds = 72;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC2_TYPELESS: root::gli::dx_dxgi_format_dds = 73;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC2_UNORM: root::gli::dx_dxgi_format_dds = 74;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC2_UNORM_SRGB: root::gli::dx_dxgi_format_dds = 75;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC3_TYPELESS: root::gli::dx_dxgi_format_dds = 76;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC3_UNORM: root::gli::dx_dxgi_format_dds = 77;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC3_UNORM_SRGB: root::gli::dx_dxgi_format_dds = 78;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC4_TYPELESS: root::gli::dx_dxgi_format_dds = 79;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC4_UNORM: root::gli::dx_dxgi_format_dds = 80;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC4_SNORM: root::gli::dx_dxgi_format_dds = 81;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC5_TYPELESS: root::gli::dx_dxgi_format_dds = 82;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC5_UNORM: root::gli::dx_dxgi_format_dds = 83;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC5_SNORM: root::gli::dx_dxgi_format_dds = 84;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B5G6R5_UNORM: root::gli::dx_dxgi_format_dds = 85;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B5G5R5A1_UNORM: root::gli::dx_dxgi_format_dds = 86;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B8G8R8A8_UNORM: root::gli::dx_dxgi_format_dds = 87;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B8G8R8X8_UNORM: root::gli::dx_dxgi_format_dds = 88;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
            root::gli::dx_dxgi_format_dds = 89;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B8G8R8A8_TYPELESS: root::gli::dx_dxgi_format_dds =
            90;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 91;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B8G8R8X8_TYPELESS: root::gli::dx_dxgi_format_dds =
            92;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 93;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC6H_TYPELESS: root::gli::dx_dxgi_format_dds = 94;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC6H_UF16: root::gli::dx_dxgi_format_dds = 95;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC6H_SF16: root::gli::dx_dxgi_format_dds = 96;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC7_TYPELESS: root::gli::dx_dxgi_format_dds = 97;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC7_UNORM: root::gli::dx_dxgi_format_dds = 98;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_BC7_UNORM_SRGB: root::gli::dx_dxgi_format_dds = 99;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_AYUV: root::gli::dx_dxgi_format_dds = 100;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_Y410: root::gli::dx_dxgi_format_dds = 101;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_Y416: root::gli::dx_dxgi_format_dds = 102;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_NV12: root::gli::dx_dxgi_format_dds = 103;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_P010: root::gli::dx_dxgi_format_dds = 104;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_P016: root::gli::dx_dxgi_format_dds = 105;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_420_OPAQUE: root::gli::dx_dxgi_format_dds = 106;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_YUY2: root::gli::dx_dxgi_format_dds = 107;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_Y210: root::gli::dx_dxgi_format_dds = 108;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_Y216: root::gli::dx_dxgi_format_dds = 109;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_NV11: root::gli::dx_dxgi_format_dds = 110;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_AI44: root::gli::dx_dxgi_format_dds = 111;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_IA44: root::gli::dx_dxgi_format_dds = 112;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_P8: root::gli::dx_dxgi_format_dds = 113;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_A8P8: root::gli::dx_dxgi_format_dds = 114;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_B4G4R4A4_UNORM: root::gli::dx_dxgi_format_dds =
            115;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_P208: root::gli::dx_dxgi_format_dds = 130;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_V208: root::gli::dx_dxgi_format_dds = 131;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_V408: root::gli::dx_dxgi_format_dds = 132;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_4X4_TYPELESS: root::gli::dx_dxgi_format_dds =
            133;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_4X4_UNORM: root::gli::dx_dxgi_format_dds =
            134;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_4X4_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 135;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_5X4_TYPELESS: root::gli::dx_dxgi_format_dds =
            137;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_5X4_UNORM: root::gli::dx_dxgi_format_dds =
            138;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_5X4_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 139;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_5X5_TYPELESS: root::gli::dx_dxgi_format_dds =
            141;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_5X5_UNORM: root::gli::dx_dxgi_format_dds =
            142;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_5X5_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 143;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_6X5_TYPELESS: root::gli::dx_dxgi_format_dds =
            145;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_6X5_UNORM: root::gli::dx_dxgi_format_dds =
            146;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_6X5_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 147;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_6X6_TYPELESS: root::gli::dx_dxgi_format_dds =
            149;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_6X6_UNORM: root::gli::dx_dxgi_format_dds =
            150;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_6X6_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 151;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X5_TYPELESS: root::gli::dx_dxgi_format_dds =
            153;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X5_UNORM: root::gli::dx_dxgi_format_dds =
            154;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X5_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 155;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X6_TYPELESS: root::gli::dx_dxgi_format_dds =
            157;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X6_UNORM: root::gli::dx_dxgi_format_dds =
            158;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X6_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 159;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X8_TYPELESS: root::gli::dx_dxgi_format_dds =
            161;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X8_UNORM: root::gli::dx_dxgi_format_dds =
            162;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_8X8_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 163;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X5_TYPELESS: root::gli::dx_dxgi_format_dds =
            165;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X5_UNORM: root::gli::dx_dxgi_format_dds =
            166;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X5_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 167;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X6_TYPELESS: root::gli::dx_dxgi_format_dds =
            169;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X6_UNORM: root::gli::dx_dxgi_format_dds =
            170;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X6_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 171;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X8_TYPELESS: root::gli::dx_dxgi_format_dds =
            173;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X8_UNORM: root::gli::dx_dxgi_format_dds =
            174;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X8_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 175;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X10_TYPELESS:
            root::gli::dx_dxgi_format_dds = 177;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X10_UNORM: root::gli::dx_dxgi_format_dds =
            178;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_10X10_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 179;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_12X10_TYPELESS:
            root::gli::dx_dxgi_format_dds = 181;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_12X10_UNORM: root::gli::dx_dxgi_format_dds =
            182;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_12X10_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 183;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_12X12_TYPELESS:
            root::gli::dx_dxgi_format_dds = 185;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_12X12_UNORM: root::gli::dx_dxgi_format_dds =
            186;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_ASTC_12X12_UNORM_SRGB:
            root::gli::dx_dxgi_format_dds = 187;
        pub const dx_dxgi_format_dds_DXGI_FORMAT_FORCE_UINT: root::gli::dx_dxgi_format_dds =
            4294967295;
        pub type dx_dxgi_format_dds = u32;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64_UINT_GLI: root::gli::dx_dxgi_format_gli = 1;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64_SINT_GLI: root::gli::dx_dxgi_format_gli = 2;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64_FLOAT_GLI: root::gli::dx_dxgi_format_gli = 3;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64_UINT_GLI: root::gli::dx_dxgi_format_gli = 4;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64_SINT_GLI: root::gli::dx_dxgi_format_gli = 5;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64_FLOAT_GLI: root::gli::dx_dxgi_format_gli =
            6;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64B64_UINT_GLI: root::gli::dx_dxgi_format_gli =
            7;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64B64_SINT_GLI: root::gli::dx_dxgi_format_gli =
            8;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64B64_FLOAT_GLI:
            root::gli::dx_dxgi_format_gli = 9;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64B64A64_UINT_GLI:
            root::gli::dx_dxgi_format_gli = 10;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64B64A64_SINT_GLI:
            root::gli::dx_dxgi_format_gli = 11;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R64G64B64A64_FLOAT_GLI:
            root::gli::dx_dxgi_format_gli = 12;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RG4_UNORM_GLI: root::gli::dx_dxgi_format_gli = 13;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA4_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            14;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R5G6B5_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            15;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R5G5B5A1_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            16;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_A1B5G5R5_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            17;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8_SRGB_GLI: root::gli::dx_dxgi_format_gli = 18;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8_USCALED_GLI: root::gli::dx_dxgi_format_gli = 19;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8_SSCALED_GLI: root::gli::dx_dxgi_format_gli = 20;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8_SRGB_GLI: root::gli::dx_dxgi_format_gli = 21;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8_USCALED_GLI: root::gli::dx_dxgi_format_gli =
            22;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8_SSCALED_GLI: root::gli::dx_dxgi_format_gli =
            23;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            24;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8_SNORM_GLI: root::gli::dx_dxgi_format_gli =
            25;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8_USCALED_GLI: root::gli::dx_dxgi_format_gli =
            26;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8_SSCALED_GLI: root::gli::dx_dxgi_format_gli =
            27;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8_UINT_GLI: root::gli::dx_dxgi_format_gli =
            28;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8_SINT_GLI: root::gli::dx_dxgi_format_gli =
            29;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8_SRGB_GLI: root::gli::dx_dxgi_format_gli =
            30;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            31;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8_SNORM_GLI: root::gli::dx_dxgi_format_gli =
            32;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8_USCALED_GLI: root::gli::dx_dxgi_format_gli =
            33;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8_SSCALED_GLI: root::gli::dx_dxgi_format_gli =
            34;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8_UINT_GLI: root::gli::dx_dxgi_format_gli =
            35;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8_SINT_GLI: root::gli::dx_dxgi_format_gli =
            36;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8_SRGB_GLI: root::gli::dx_dxgi_format_gli =
            37;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_USCALED_GLI:
            root::gli::dx_dxgi_format_gli = 38;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_SSCALED_GLI:
            root::gli::dx_dxgi_format_gli = 39;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8A8_SNORM_GLI: root::gli::dx_dxgi_format_gli =
            40;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8A8_USCALED_GLI:
            root::gli::dx_dxgi_format_gli = 41;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8A8_SSCALED_GLI:
            root::gli::dx_dxgi_format_gli = 42;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8A8_UINT_GLI: root::gli::dx_dxgi_format_gli =
            43;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B8G8R8A8_SINT_GLI: root::gli::dx_dxgi_format_gli =
            44;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_PACK_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 45;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_PACK_SNORM_GLI:
            root::gli::dx_dxgi_format_gli = 46;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_PACK_USCALED_GLI:
            root::gli::dx_dxgi_format_gli = 47;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_PACK_SSCALED_GLI:
            root::gli::dx_dxgi_format_gli = 48;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_PACK_UINT_GLI:
            root::gli::dx_dxgi_format_gli = 49;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_PACK_SINT_GLI:
            root::gli::dx_dxgi_format_gli = 50;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R8G8B8A8_PACK_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 51;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R10G10B10A2_SNORM_GLI:
            root::gli::dx_dxgi_format_gli = 52;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R10G10B10A2_USCALED_GLI:
            root::gli::dx_dxgi_format_gli = 53;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R10G10B10A2_SSCALED_GLI:
            root::gli::dx_dxgi_format_gli = 54;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R10G10B10A2_SINT_GLI:
            root::gli::dx_dxgi_format_gli = 55;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B10G10R10A2_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 56;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B10G10R10A2_SNORM_GLI:
            root::gli::dx_dxgi_format_gli = 57;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B10G10R10A2_USCALED_GLI:
            root::gli::dx_dxgi_format_gli = 58;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B10G10R10A2_SSCALED_GLI:
            root::gli::dx_dxgi_format_gli = 59;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B10G10R10A2_UINT_GLI:
            root::gli::dx_dxgi_format_gli = 60;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_B10G10R10A2_SINT_GLI:
            root::gli::dx_dxgi_format_gli = 61;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16_USCALED_GLI: root::gli::dx_dxgi_format_gli =
            62;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16_SSCALED_GLI: root::gli::dx_dxgi_format_gli =
            63;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16_USCALED_GLI: root::gli::dx_dxgi_format_gli =
            64;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16_SSCALED_GLI: root::gli::dx_dxgi_format_gli =
            65;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 66;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16_SNORM_GLI:
            root::gli::dx_dxgi_format_gli = 67;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16_USCALED_GLI:
            root::gli::dx_dxgi_format_gli = 68;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16_SSCALED_GLI:
            root::gli::dx_dxgi_format_gli = 69;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16_UINT_GLI: root::gli::dx_dxgi_format_gli =
            70;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16_SINT_GLI: root::gli::dx_dxgi_format_gli =
            71;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16_FLOAT_GLI:
            root::gli::dx_dxgi_format_gli = 72;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16A16_USCALED_GLI:
            root::gli::dx_dxgi_format_gli = 73;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R16G16B16A16_SSCALED_GLI:
            root::gli::dx_dxgi_format_gli = 74;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_S8_UINT_GLI: root::gli::dx_dxgi_format_gli = 75;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_D16_UNORM_S8_UINT_GLI:
            root::gli::dx_dxgi_format_gli = 76;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_D24_UNORM_GLI: root::gli::dx_dxgi_format_gli = 77;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_L8_UNORM_GLI: root::gli::dx_dxgi_format_gli = 78;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_A8_UNORM_GLI: root::gli::dx_dxgi_format_gli = 79;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_LA8_UNORM_GLI: root::gli::dx_dxgi_format_gli = 80;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_L16_UNORM_GLI: root::gli::dx_dxgi_format_gli = 81;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_A16_UNORM_GLI: root::gli::dx_dxgi_format_gli = 82;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_LA16_UNORM_GLI: root::gli::dx_dxgi_format_gli = 83;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R3G3B2_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            84;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_BC1_RGB_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            85;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_BC1_RGB_SRGB_GLI: root::gli::dx_dxgi_format_gli =
            86;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_ETC2_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            87;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_ETC2_SRGB_GLI: root::gli::dx_dxgi_format_gli =
            88;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_ETC2_A1_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 89;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_ETC2_A1_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 90;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_ETC2_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 91;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_ETC2_SRGB_GLI: root::gli::dx_dxgi_format_gli =
            92;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R11_EAC_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            93;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_R11_EAC_SNORM_GLI: root::gli::dx_dxgi_format_gli =
            94;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RG11_EAC_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            95;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RG11_EAC_SNORM_GLI: root::gli::dx_dxgi_format_gli =
            96;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_PVRTC1_8X8_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 97;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_PVRTC1_8X8_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 98;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_PVRTC1_16X8_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 99;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_PVRTC1_16X8_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 100;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC1_8X8_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 101;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC1_8X8_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 102;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC1_16X8_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 103;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC1_16X8_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 104;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC2_8X8_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 105;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC2_8X8_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 106;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC2_16X8_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 107;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_PVRTC2_16X8_SRGB_GLI:
            root::gli::dx_dxgi_format_gli = 108;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_ETC_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            109;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGB_ATC_UNORM_GLI: root::gli::dx_dxgi_format_gli =
            110;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_ATCA_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 111;
        pub const dx_dxgi_format_gli_DXGI_FORMAT_RGBA_ATCI_UNORM_GLI:
            root::gli::dx_dxgi_format_gli = 112;
        pub type dx_dxgi_format_gli = u32;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct dx_dxgiFormat {
            pub DDS: root::__BindgenUnionField<root::gli::dx_dxgi_format_dds>,
            pub GLI: root::__BindgenUnionField<root::gli::dx_dxgi_format_gli>,
            pub bindgen_union_field: u32,
        }
        pub const dx_ddpf_DDPF_ALPHAPIXELS: root::gli::dx_ddpf = 1;
        pub const dx_ddpf_DDPF_ALPHA: root::gli::dx_ddpf = 2;
        pub const dx_ddpf_DDPF_FOURCC: root::gli::dx_ddpf = 4;
        pub const dx_ddpf_DDPF_RGB: root::gli::dx_ddpf = 64;
        pub const dx_ddpf_DDPF_YUV: root::gli::dx_ddpf = 512;
        pub const dx_ddpf_DDPF_LUMINANCE: root::gli::dx_ddpf = 131072;
        pub const dx_ddpf_DDPF_LUMINANCE_ALPHA: root::gli::dx_ddpf = 131074;
        pub const dx_ddpf_DDPF_RGBAPIXELS: root::gli::dx_ddpf = 65;
        pub const dx_ddpf_DDPF_RGBA: root::gli::dx_ddpf = 66;
        pub const dx_ddpf_DDPF_LUMINANCE_ALPHAPIXELS: root::gli::dx_ddpf = 131073;
        pub type dx_ddpf = u32;
        #[repr(C)]
        #[derive(Debug)]
        pub struct dx_format {
            pub DDPixelFormat: root::gli::dx_ddpf,
            pub D3DFormat: root::gli::dx_d3dfmt,
            pub DXGIFormat: root::gli::dx_dxgiFormat,
            pub Mask: root::glm::u32vec4,
        }
        impl Default for dx_format {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[doc = " Convert GLI formats into Direct3D formats"]
            #[link_name = "\u{1}translate"]
            pub fn dx_translate(
                this: *const root::gli::dx,
                Format: root::gli::format,
            ) -> *const root::gli::dx_format;
        }
        extern "C" {
            #[doc = " Convert a Direct3D 9 format into a GLI format"]
            #[link_name = "\u{1}find"]
            pub fn dx_find(
                this: *const root::gli::dx,
                FourCC: root::gli::dx_d3dfmt,
            ) -> root::gli::format;
        }
        extern "C" {
            #[doc = " Convert a Direct3D 10 format into a GLI format"]
            #[link_name = "\u{1}find"]
            pub fn dx_find1(
                this: *const root::gli::dx,
                FourCC: root::gli::dx_d3dfmt,
                Format: root::gli::dx_dxgiFormat,
            ) -> root::gli::format;
        }
        extern "C" {
            #[link_name = "\u{1}dx"]
            pub fn dx_dx(this: *mut root::gli::dx);
        }
        impl Default for dx {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl dx {
            #[inline]
            pub unsafe fn translate(
                &self,
                Format: root::gli::format,
            ) -> *const root::gli::dx_format {
                dx_translate(self, Format)
            }
            #[inline]
            pub unsafe fn find(&self, FourCC: root::gli::dx_d3dfmt) -> root::gli::format {
                dx_find(self, FourCC)
            }
            #[inline]
            pub unsafe fn find1(
                &self,
                FourCC: root::gli::dx_d3dfmt,
                Format: root::gli::dx_dxgiFormat,
            ) -> root::gli::format {
                dx_find1(self, FourCC, Format)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                dx_dx(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[doc = " Evaluate whether a target and format combinaison is only supported by the DDS container through GLI DDS extension."]
            pub fn is_dds_ext(Target: root::gli::target, Format: root::gli::format) -> bool;
        }
        pub const filter_FILTER_NONE: root::gli::filter = 0;
        pub const filter_FILTER_NEAREST: root::gli::filter = 1;
        pub const filter_FILTER_FIRST: root::gli::filter = 1;
        pub const filter_FILTER_LINEAR: root::gli::filter = 2;
        pub const filter_FILTER_LAST: root::gli::filter = 2;
        #[doc = " Texture filtring modes"]
        pub type filter = u32;
        pub const wrap_WRAP_CLAMP_TO_EDGE: root::gli::wrap = 0;
        pub const wrap_WRAP_FIRST: root::gli::wrap = 0;
        pub const wrap_WRAP_CLAMP_TO_BORDER: root::gli::wrap = 1;
        pub const wrap_WRAP_REPEAT: root::gli::wrap = 2;
        pub const wrap_WRAP_MIRROR_REPEAT: root::gli::wrap = 3;
        pub const wrap_WRAP_MIRROR_CLAMP_TO_EDGE: root::gli::wrap = 4;
        pub const wrap_WRAP_MIRROR_CLAMP_TO_BORDER: root::gli::wrap = 5;
        pub const wrap_WRAP_LAST: root::gli::wrap = 5;
        #[doc = " Texture coordinate wrapping mode"]
        pub type wrap = u32;
        pub type sampler1d_interpolate_type = root::gli::detail::interpolate;
        pub type sampler1d_texture_type = root::gli::texture1d;
        pub type sampler1d_size_type = root::gli::texture_size_type;
        pub type sampler1d_extent_type = root::gli::texture1d_extent_type;
        pub type sampler1d_level_type = root::gli::sampler1d_interpolate_type;
        pub type sampler1d_normalized_type = u8;
        pub type sampler1d_texel_type = u8;
        pub type sampler1d_convert_type = u8;
        pub type sampler1d_fetch_type = u8;
        pub type sampler1d_write_type = u8;
        pub type sampler1d_filter_type = u8;
        #[repr(transparent)]
        pub struct fsampler1D(pub [u64; 66usize]);
        impl ::std::ops::Deref for fsampler1D {
            type Target = [u64; 66usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for fsampler1D {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        pub type sampler1d_array_interpolate_type = root::gli::detail::interpolate;
        pub type sampler1d_array_texture_type = root::gli::texture1d_array;
        pub type sampler1d_array_size_type = root::gli::texture_size_type;
        pub type sampler1d_array_extent_type = root::gli::texture1d_array_extent_type;
        pub type sampler1d_array_level_type = root::gli::sampler1d_array_interpolate_type;
        pub type sampler1d_array_normalized_type = u8;
        pub type sampler1d_array_texel_type = u8;
        pub type sampler1d_array_convert_type = u8;
        pub type sampler1d_array_fetch_type = u8;
        pub type sampler1d_array_write_type = u8;
        pub type sampler1d_array_filter_type = u8;
        #[repr(transparent)]
        pub struct fsampler1DArray(pub [u64; 66usize]);
        impl ::std::ops::Deref for fsampler1DArray {
            type Target = [u64; 66usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for fsampler1DArray {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        pub type sampler2d_interpolate_type = root::gli::detail::interpolate;
        pub type sampler2d_texture_type = root::gli::texture2d;
        pub type sampler2d_size_type = root::gli::texture_size_type;
        pub type sampler2d_extent_type = root::gli::texture2d_extent_type;
        pub type sampler2d_level_type = root::gli::sampler2d_interpolate_type;
        pub type sampler2d_normalized_type = u8;
        pub type sampler2d_texel_type = u8;
        pub type sampler2d_convert_type = u8;
        pub type sampler2d_fetch_type = u8;
        pub type sampler2d_write_type = u8;
        pub type sampler2d_filter_type = u8;
        #[repr(transparent)]
        pub struct fsampler2D(pub [u64; 66usize]);
        impl ::std::ops::Deref for fsampler2D {
            type Target = [u64; 66usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for fsampler2D {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        pub type sampler2d_array_interpolate_type = root::gli::detail::interpolate;
        pub type sampler2d_array_texture_type = root::gli::texture2d_array;
        pub type sampler2d_array_size_type = root::gli::texture_size_type;
        pub type sampler2d_array_extent_type = root::gli::texture2d_array_extent_type;
        pub type sampler2d_array_level_type = root::gli::sampler2d_array_interpolate_type;
        pub type sampler2d_array_normalized_type = u8;
        pub type sampler2d_array_texel_type = u8;
        pub type sampler2d_array_convert_type = u8;
        pub type sampler2d_array_fetch_type = u8;
        pub type sampler2d_array_write_type = u8;
        pub type sampler2d_array_filter_type = u8;
        #[repr(transparent)]
        pub struct fsampler2DArray(pub [u64; 66usize]);
        impl ::std::ops::Deref for fsampler2DArray {
            type Target = [u64; 66usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for fsampler2DArray {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        pub type sampler3d_interpolate_type = root::gli::detail::interpolate;
        pub type sampler3d_texture_type = root::gli::texture3d;
        pub type sampler3d_size_type = root::gli::texture_size_type;
        pub type sampler3d_extent_type = root::gli::texture3d_extent_type;
        pub type sampler3d_level_type = root::gli::sampler3d_interpolate_type;
        pub type sampler3d_normalized_type = u8;
        pub type sampler3d_texel_type = u8;
        pub type sampler3d_convert_type = u8;
        pub type sampler3d_fetch_type = u8;
        pub type sampler3d_write_type = u8;
        pub type sampler3d_filter_type = u8;
        #[repr(transparent)]
        pub struct fsampler3D(pub [u64; 66usize]);
        impl ::std::ops::Deref for fsampler3D {
            type Target = [u64; 66usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for fsampler3D {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        pub type sampler_cube_interpolate_type = root::gli::detail::interpolate;
        pub type sampler_cube_texture_type = root::gli::texture_cube;
        pub type sampler_cube_size_type = root::gli::texture_size_type;
        pub type sampler_cube_extent_type = root::gli::texture_cube_extent_type;
        pub type sampler_cube_level_type = root::gli::sampler_cube_interpolate_type;
        pub type sampler_cube_normalized_type = u8;
        pub type sampler_cube_texel_type = u8;
        pub type sampler_cube_convert_type = u8;
        pub type sampler_cube_fetch_type = u8;
        pub type sampler_cube_write_type = u8;
        pub type sampler_cube_filter_type = u8;
        #[repr(transparent)]
        pub struct fsamplerCube(pub [u64; 66usize]);
        impl ::std::ops::Deref for fsamplerCube {
            type Target = [u64; 66usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for fsamplerCube {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        pub type sampler_cube_array_interpolate_type = root::gli::detail::interpolate;
        pub type sampler_cube_array_texture_type = root::gli::texture_cube_array;
        pub type sampler_cube_array_size_type = root::gli::texture_size_type;
        pub type sampler_cube_array_extent_type = root::gli::texture_cube_array_extent_type;
        pub type sampler_cube_array_level_type = root::gli::sampler_cube_array_interpolate_type;
        pub type sampler_cube_array_normalized_type = u8;
        pub type sampler_cube_array_texel_type = u8;
        pub type sampler_cube_array_convert_type = u8;
        pub type sampler_cube_array_fetch_type = u8;
        pub type sampler_cube_array_write_type = u8;
        pub type sampler_cube_array_filter_type = u8;
        #[repr(transparent)]
        pub struct fsamplerCubeArray(pub [u64; 66usize]);
        impl ::std::ops::Deref for fsamplerCubeArray {
            type Target = [u64; 66usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for fsamplerCubeArray {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_size_type = u64;
        pub type allocator_difference_type = u64;
        pub type allocator_pointer = u8;
        pub type allocator_const_pointer = u8;
        pub type allocator_reference = u8;
        pub type allocator_const_reference = u8;
        pub type allocator_value_type = u8;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = u8;
        pub type allocator_propagate_on_container_move_assignment = u8;
        pub type allocator_is_always_equal = u8;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct vector {
            pub _address: u8,
        }
        pub type vector__Base = u8;
        pub type vector__Tp_alloc_type = u8;
        pub type vector__Alloc_traits = u8;
        pub type vector_value_type = u8;
        pub type vector_pointer = u8;
        pub type vector_const_pointer = u8;
        pub type vector_reference = u8;
        pub type vector_const_reference = u8;
        pub type vector_iterator = u8;
        pub type vector_const_iterator = u8;
        pub type vector_const_reverse_iterator = u8;
        pub type vector_reverse_iterator = u8;
        pub type vector_size_type = u64;
        pub type vector_difference_type = u64;
        pub type vector_allocator_type = u8;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct vector__Temporary_value {
            pub _address: u8,
        }
        pub type array_value_type = u8;
        pub type array_pointer = u8;
        pub type array_const_pointer = u8;
        pub type array_reference = u8;
        pub type array_const_reference = u8;
        pub type array_iterator = u8;
        pub type array_const_iterator = u8;
        pub type array_size_type = u64;
        pub type array_difference_type = u64;
        pub type array_reverse_iterator = u8;
        pub type array_const_reverse_iterator = u8;
        pub type array__AT_Type = u8;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct shared_ptr {
            pub _address: u8,
        }
        pub type shared_ptr__Constructible = u8;
        pub type shared_ptr__Assignable = u8;
        pub type shared_ptr_element_type = u8;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod glm {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[doc = " 8 bit unsigned integer type."]
        pub type uint8 = u8;
        #[doc = " 1 component vector of signed integer numbers."]
        pub type ivec1 = u32;
        #[doc = " 2 components vector of signed integer numbers."]
        #[doc = ""]
        #[doc = " @see <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>"]
        #[derive(Debug, Default)]
        #[repr(transparent)]
        pub struct ivec2(pub [u32; 2usize]);
        impl ::std::ops::Deref for ivec2 {
            type Target = [u32; 2usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for ivec2 {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        #[doc = " 3 components vector of signed integer numbers."]
        #[doc = ""]
        #[doc = " @see <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>"]
        #[derive(Debug, Default)]
        #[repr(transparent)]
        pub struct ivec3(pub [u32; 3usize]);
        impl ::std::ops::Deref for ivec3 {
            type Target = [u32; 3usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for ivec3 {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        #[doc = " Default qualifier 32 bit unsigned integer vector of 4 components type."]
        #[doc = " @see gtc_type_precision"]
        pub type u32vec4 = [u32; 4usize];
        #[doc = " 4 components vector of single-precision floating-point numbers."]
        #[doc = ""]
        #[doc = " @see <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>"]
        #[repr(transparent)]
        pub struct vec4(pub [u32; 4usize]);
        impl ::std::ops::Deref for vec4 {
            type Target = [u32; 4usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for vec4 {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        #[repr(transparent)]
        pub struct vec4f(pub [f32; 4usize]);
        impl ::std::ops::Deref for vec4f {
            type Target = [f32; 4usize];
            #[inline]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl ::std::ops::DerefMut for vec4f {
            #[inline]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
    }
    pub mod bindings {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod Texture {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn texture_empty(tex: *const root::gli::texture) -> bool;
            }
            extern "C" {
                pub fn texture_format(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_format_type;
            }
            extern "C" {
                pub fn texture_target(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_target_type;
            }
            extern "C" {
                pub fn texture_swizzles(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_swizzles_type;
            }
            extern "C" {
                pub fn texture_base_layer(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_max_layer(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_layers(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_base_face(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_max_face(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_faces(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_base_level(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_max_level(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_levels(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_extent(
                    tex: *const root::gli::texture,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture_extent_type;
            }
            extern "C" {
                pub fn texture_size(tex: *const root::gli::texture)
                    -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_size_level(
                    tex: *const root::gli::texture,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture_size_type;
            }
            extern "C" {
                pub fn texture_data(
                    tex: *const root::gli::texture,
                ) -> *const ::std::os::raw::c_void;
            }
            extern "C" {
                pub fn texture_data_mut(
                    tex: *mut root::gli::texture,
                ) -> *mut ::std::os::raw::c_void;
            }
            extern "C" {
                pub fn texture_data_detail(
                    tex: *const root::gli::texture,
                    layer: root::gli::texture_size_type,
                    face: root::gli::texture_size_type,
                    level: root::gli::texture_size_type,
                ) -> *const ::std::os::raw::c_void;
            }
            extern "C" {
                pub fn texture_data_detail_mut(
                    tex: *mut root::gli::texture,
                    layer: root::gli::texture_size_type,
                    face: root::gli::texture_size_type,
                    level: root::gli::texture_size_type,
                ) -> *mut ::std::os::raw::c_void;
            }
            extern "C" {
                pub fn texture_clear(tex: *mut root::gli::texture);
            }
            extern "C" {
                pub fn texture_copy(
                    tex: *mut root::gli::texture,
                    src: *const root::gli::texture,
                    src_layer: usize,
                    src_face: usize,
                    src_level: usize,
                    dst_layer: usize,
                    dst_face: usize,
                    dst_level: usize,
                );
            }
            extern "C" {
                pub fn texture_copy_subset(
                    tex: *mut root::gli::texture,
                    src: *const root::gli::texture,
                    src_layer: usize,
                    src_face: usize,
                    src_level: usize,
                    src_offset: *const root::gli::texture_extent_type,
                    dst_layer: usize,
                    dst_face: usize,
                    dst_level: usize,
                    dst_offset: *const root::gli::texture_extent_type,
                    extent: *const root::gli::texture_extent_type,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for texture object. Helper function used in FFI."]
                pub fn destroy_texture(tex: *mut root::gli::texture);
            }
            extern "C" {
                pub fn get_texture_shared_storage_count(
                    tex: *const root::gli::texture,
                ) -> ::std::os::raw::c_int;
            }
        }
        pub mod Image {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn image_new_empty() -> root::gli::image;
            }
            extern "C" {
                pub fn image_new_(
                    format: root::gli::image_format_type,
                    extent: root::gli::image_extent_type,
                ) -> root::gli::image;
            }
            extern "C" {
                pub fn image_share_from(
                    img: *const root::gli::image,
                    format: root::gli::image_format_type,
                ) -> root::gli::image;
            }
            extern "C" {
                pub fn image_share_from_texture(
                    tex: *const root::gli::texture,
                    format: root::gli::image_format_type,
                    base_layer: root::gli::image_size_type,
                    base_face: root::gli::image_size_type,
                    base_level: root::gli::image_size_type,
                ) -> root::gli::image;
            }
            extern "C" {
                pub fn image_empty(img: *const root::gli::image) -> bool;
            }
            extern "C" {
                pub fn image_format(img: *const root::gli::image) -> root::gli::image_format_type;
            }
            extern "C" {
                pub fn image_extent(img: *const root::gli::image) -> root::gli::image_extent_type;
            }
            extern "C" {
                pub fn image_size(img: *const root::gli::image) -> root::gli::image_size_type;
            }
            extern "C" {
                pub fn image_data_mut(img: *mut root::gli::image) -> *mut ::std::os::raw::c_void;
            }
            extern "C" {
                pub fn image_data(img: *const root::gli::image) -> *const ::std::os::raw::c_void;
            }
            extern "C" {
                pub fn image_clear(img: *mut root::gli::image);
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_image(img: *mut root::gli::image);
            }
            extern "C" {
                pub fn get_image_shared_storage_count(
                    img: *const root::gli::image,
                ) -> ::std::os::raw::c_int;
            }
        }
        pub mod Texture1D {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn tex1d_new_empty() -> root::gli::texture1d;
            }
            extern "C" {
                pub fn tex1d_new_(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture1d_extent_type,
                    levels: root::gli::texture_size_type,
                ) -> root::gli::texture1d;
            }
            extern "C" {
                pub fn tex1d_new_with_mipmap_chain(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture1d_extent_type,
                ) -> root::gli::texture1d;
            }
            extern "C" {
                pub fn tex1d_share_from(tex: *const root::gli::texture) -> root::gli::texture1d;
            }
            extern "C" {
                pub fn tex1d_share_from_detail(
                    tex: *const root::gli::texture,
                    format: root::gli::texture_format_type,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture1d;
            }
            extern "C" {
                pub fn tex1d_share_from_subset(
                    tex: *const root::gli::texture1d,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture1d;
            }
            extern "C" {
                pub fn tex1d_extent(
                    tex: *const root::gli::texture1d,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture1d_extent_type;
            }
        }
        pub mod Texture1DArray {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn tex1darray_new_empty() -> root::gli::texture1d_array;
            }
            extern "C" {
                pub fn tex1darray_new_(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture1d_array_extent_type,
                    layers: root::gli::texture_size_type,
                    levels: root::gli::texture_size_type,
                ) -> root::gli::texture1d_array;
            }
            extern "C" {
                pub fn tex1darray_new_with_mipmap_chain(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture1d_array_extent_type,
                    layers: root::gli::texture_size_type,
                ) -> root::gli::texture1d_array;
            }
            extern "C" {
                pub fn tex1darray_share_from(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture1d_array;
            }
            extern "C" {
                pub fn tex1darray_share_from_detail(
                    tex: *const root::gli::texture,
                    format: root::gli::texture_format_type,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture1d_array;
            }
            extern "C" {
                pub fn tex1darray_share_from_subset(
                    tex: *const root::gli::texture1d_array,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture1d_array;
            }
            extern "C" {
                pub fn tex1darray_extent(
                    tex: *const root::gli::texture1d_array,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture1d_array_extent_type;
            }
        }
        pub mod Texture2D {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn tex2d_new_empty() -> root::gli::texture2d;
            }
            extern "C" {
                pub fn tex2d_new_(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture2d_extent_type,
                    levels: root::gli::texture_size_type,
                ) -> root::gli::texture2d;
            }
            extern "C" {
                pub fn tex2d_new_with_mipmap_chain(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture2d_extent_type,
                ) -> root::gli::texture2d;
            }
            extern "C" {
                pub fn tex2d_share_from(tex: *const root::gli::texture) -> root::gli::texture2d;
            }
            extern "C" {
                // void tex2d_store_4d_(texture2d &t, texture2d::extent_type extent, texture2d::size_type level, glm::vec4 data) {
                pub fn tex2d_store_4d_(
                    tex : *mut root::gli::texture2d,
                    extent : root::gli::texture2d_extent_type,
                    level : root::gli::texture_size_type,
                    data : root::glm::vec4f
                );
            }
            extern "C" {
                pub fn tex2d_share_from_detail(
                    tex: *const root::gli::texture,
                    format: root::gli::texture_format_type,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture2d;
            }
            extern "C" {
                pub fn tex2d_share_from_subset(
                    tex: *const root::gli::texture2d,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture2d;
            }
            extern "C" {
                pub fn tex2d_extent(
                    tex: *const root::gli::texture2d,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture2d_extent_type;
            }
        }
        pub mod Texture2DArray {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn tex2darray_new_empty() -> root::gli::texture2d_array;
            }
            extern "C" {
                pub fn tex2darray_new_(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture2d_array_extent_type,
                    layers: root::gli::texture_size_type,
                    levels: root::gli::texture_size_type,
                ) -> root::gli::texture2d_array;
            }
            extern "C" {
                pub fn tex2darray_new_with_mipmap_chain(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture2d_array_extent_type,
                    layers: root::gli::texture_size_type,
                ) -> root::gli::texture2d_array;
            }
            extern "C" {
                pub fn tex2darray_share_from(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture2d_array;
            }
            extern "C" {
                pub fn tex2darray_share_from_detail(
                    tex: *const root::gli::texture,
                    format: root::gli::texture_format_type,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture2d_array;
            }
            extern "C" {
                pub fn tex2darray_share_from_subset(
                    tex: *const root::gli::texture2d_array,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture2d_array;
            }
            extern "C" {
                pub fn tex2darray_extent(
                    tex: *const root::gli::texture2d_array,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture2d_array_extent_type;
            }
        }
        pub mod Texture3D {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn tex3d_new_empty() -> root::gli::texture3d;
            }
            extern "C" {
                pub fn tex3d_new_(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture3d_extent_type,
                    levels: root::gli::texture_size_type,
                ) -> root::gli::texture3d;
            }
            extern "C" {
                pub fn tex3d_new_with_mipmap_chain(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture3d_extent_type,
                ) -> root::gli::texture3d;
            }
            extern "C" {
                pub fn tex3d_share_from(tex: *const root::gli::texture) -> root::gli::texture3d;
            }
            extern "C" {
                pub fn tex3d_share_from_detail(
                    tex: *const root::gli::texture,
                    format: root::gli::texture_format_type,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture3d;
            }
            extern "C" {
                pub fn tex3d_share_from_subset(
                    tex: *const root::gli::texture3d,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture3d;
            }
            extern "C" {
                pub fn tex3d_extent(
                    tex: *const root::gli::texture3d,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture3d_extent_type;
            }
        }
        pub mod TextureCube {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn texcube_new_empty() -> root::gli::texture_cube;
            }
            extern "C" {
                pub fn texcube_new_(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture_cube_extent_type,
                    levels: root::gli::texture_size_type,
                ) -> root::gli::texture_cube;
            }
            extern "C" {
                pub fn texcube_new_with_mipmap_chain(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture_cube_extent_type,
                ) -> root::gli::texture_cube;
            }
            extern "C" {
                pub fn texcube_share_from(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_cube;
            }
            extern "C" {
                pub fn texcube_share_from_detail(
                    tex: *const root::gli::texture,
                    format: root::gli::texture_format_type,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture_cube;
            }
            extern "C" {
                pub fn texcube_share_from_subset(
                    tex: *const root::gli::texture_cube,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture_cube;
            }
            extern "C" {
                pub fn texcube_extent(
                    tex: *const root::gli::texture_cube,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture_cube_extent_type;
            }
        }
        pub mod TextureCubeArray {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn texcubearray_new_empty() -> root::gli::texture_cube_array;
            }
            extern "C" {
                pub fn texcubearray_new_(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture_cube_array_extent_type,
                    layers: root::gli::texture_size_type,
                    levels: root::gli::texture_size_type,
                ) -> root::gli::texture_cube_array;
            }
            extern "C" {
                pub fn texcubearray_new_with_mipmap_chain(
                    format: root::gli::texture_format_type,
                    extent: root::gli::texture_cube_array_extent_type,
                    layers: root::gli::texture_size_type,
                ) -> root::gli::texture_cube_array;
            }
            extern "C" {
                pub fn texcubearray_share_from(
                    tex: *const root::gli::texture,
                ) -> root::gli::texture_cube_array;
            }
            extern "C" {
                pub fn texcubearray_share_from_detail(
                    tex: *const root::gli::texture,
                    format: root::gli::texture_format_type,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture_cube_array;
            }
            extern "C" {
                pub fn texcubearray_share_from_subset(
                    tex: *const root::gli::texture_cube_array,
                    base_layer: root::gli::texture_size_type,
                    max_layer: root::gli::texture_size_type,
                    base_face: root::gli::texture_size_type,
                    max_face: root::gli::texture_size_type,
                    base_level: root::gli::texture_size_type,
                    max_level: root::gli::texture_size_type,
                ) -> root::gli::texture_cube_array;
            }
            extern "C" {
                pub fn texcubearray_extent(
                    tex: *const root::gli::texture_cube_array,
                    level: root::gli::texture_size_type,
                ) -> root::gli::texture_cube_array_extent_type;
            }
        }
        pub mod Comparison {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn is_image_equal(
                    image_a: *const root::gli::image,
                    image_b: *const root::gli::image,
                ) -> bool;
            }
            extern "C" {
                pub fn is_image_unequal(
                    image_a: *const root::gli::image,
                    image_b: *const root::gli::image,
                ) -> bool;
            }
            extern "C" {
                pub fn is_texture_equal(
                    a: *const root::gli::texture,
                    b: *const root::gli::texture,
                ) -> bool;
            }
            extern "C" {
                pub fn is_texture_unequal(
                    a: *const root::gli::texture,
                    b: *const root::gli::texture,
                ) -> bool;
            }
        }
        pub mod GL {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn new_gl_converter(Profile: root::gli::gl_profile) -> root::gli::gl;
            }
            extern "C" {
                pub fn gl_translate(
                    converter: *const root::gli::gl,
                    Target: root::gli::target,
                ) -> root::gli::gl_target;
            }
            extern "C" {
                pub fn gl_translate1(
                    converter: *const root::gli::gl,
                    Format: root::gli::format,
                    Swizzle: *const root::gli::swizzles,
                ) -> root::gli::gl_format;
            }
            extern "C" {
                pub fn gl_find(
                    converter: *mut root::gli::gl,
                    InternalFormat: root::gli::gl_internal_format,
                    ExternalFormat: root::gli::gl_external_format,
                    Type: root::gli::gl_type_format,
                ) -> root::gli::format;
            }
        }
        pub mod DX {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn new_dx_converter() -> root::gli::dx;
            }
            extern "C" {
                pub fn dx_translate(
                    converter: *const root::gli::dx,
                    Format: root::gli::format,
                ) -> root::gli::dx_format;
            }
            extern "C" {
                pub fn dx_find(
                    converter: *const root::gli::dx,
                    FourCC: root::gli::dx_d3dfmt,
                ) -> root::gli::format;
            }
            extern "C" {
                pub fn dx_find2(
                    converter: *const root::gli::dx,
                    FourCC: root::gli::dx_d3dfmt,
                    Format: root::gli::dx_dxgiFormat,
                ) -> root::gli::format;
            }
            extern "C" {
                pub fn is_dds_ext(Target: root::gli::target, Format: root::gli::format) -> bool;
            }
        }
        pub mod Load {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn load_memory(
                    Data: *const ::std::os::raw::c_char,
                    Size: usize,
                ) -> root::gli::texture;
            }
            extern "C" {
                pub fn load_by_path(Path: *const ::std::os::raw::c_char) -> root::gli::texture;
            }
            extern "C" {
                pub fn load_dds_memory(
                    Data: *const ::std::os::raw::c_char,
                    Size: usize,
                ) -> root::gli::texture;
            }
            extern "C" {
                pub fn load_dds_by_path(Path: *const ::std::os::raw::c_char) -> root::gli::texture;
            }
            extern "C" {
                pub fn load_kmg_memory(
                    Data: *const ::std::os::raw::c_char,
                    Size: usize,
                ) -> root::gli::texture;
            }
            extern "C" {
                pub fn load_kmg_by_path(Path: *const ::std::os::raw::c_char) -> root::gli::texture;
            }
            extern "C" {
                pub fn load_ktx_memory(
                    Data: *const ::std::os::raw::c_char,
                    Size: usize,
                ) -> root::gli::texture;
            }
            extern "C" {
                pub fn load_ktx_by_path(Path: *const ::std::os::raw::c_char) -> root::gli::texture;
            }
        }
        pub mod Save {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn save_save_dds(
                    Texture: *const root::gli::texture,
                    Path: *const ::std::os::raw::c_char,
                ) -> bool;
            }
            extern "C" {
                pub fn save_save_kmg(
                    Texture: *const root::gli::texture,
                    Path: *const ::std::os::raw::c_char,
                ) -> bool;
            }
            extern "C" {
                pub fn save_save_ktx(
                    Texture: *const root::gli::texture,
                    Path: *const ::std::os::raw::c_char,
                ) -> bool;
            }
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct TexelType4F {
            pub content: [f32; 4usize],
        }
        extern "C" {
            pub fn vec4ToTex4F(raw: root::glm::vec4) -> root::bindings::TexelType4F;
        }
        pub mod FSampler1D {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn fsampler1d_new(
                    Texture: *const root::gli::texture1d,
                    Wrap: root::gli::wrap,
                    Mip: root::gli::filter,
                    Min: root::gli::filter,
                ) -> root::gli::fsampler1D;
            }
            extern "C" {
                pub fn fsampler1d_set_border_color(
                    Sampler: *mut root::gli::fsampler1D,
                    BorderColor: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler1d_clear(
                    Sampler: *mut root::gli::fsampler1D,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler1d_texel_fetch(
                    Sampler: *const root::gli::fsampler1D,
                    TexelCoord: u32,
                    Level: root::gli::texture_size_type,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler1d_texel_write(
                    Sampler: *mut root::gli::fsampler1D,
                    TexelCoord: u32,
                    Level: root::gli::texture_size_type,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler1d_texel_lod(
                    Sampler: *const root::gli::fsampler1D,
                    SampleCoord: f32,
                    Level: f32,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler1d_target_texture(
                    Sampler: *const root::gli::fsampler1D,
                ) -> *const root::gli::texture1d;
            }
            extern "C" {
                pub fn fsampler1d_generate_mipmaps1(
                    Sampler: *mut root::gli::fsampler1D,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                pub fn fsampler1d_generate_mipmaps2(
                    Sampler: *mut root::gli::fsampler1D,
                    BaseLevel: root::gli::texture_size_type,
                    MaxLevel: root::gli::texture_size_type,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_sampler1d(Sampler: *mut root::gli::fsampler1D);
            }
        }
        pub mod FSampler1DArray {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn fsampler1darray_new(
                    Texture: *const root::gli::texture1d_array,
                    Wrap: root::gli::wrap,
                    Mip: root::gli::filter,
                    Min: root::gli::filter,
                ) -> root::gli::fsampler1DArray;
            }
            extern "C" {
                pub fn fsampler1darray_set_border_color(
                    Sampler: *mut root::gli::fsampler1DArray,
                    BorderColor: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler1darray_clear(
                    Sampler: *mut root::gli::fsampler1DArray,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler1darray_texel_fetch(
                    Sampler: *const root::gli::fsampler1DArray,
                    TexelCoord: u32,
                    Layer: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler1darray_texel_write(
                    Sampler: *mut root::gli::fsampler1DArray,
                    TexelCoord: u32,
                    Layer: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler1darray_texel_lod(
                    Sampler: *const root::gli::fsampler1DArray,
                    SampleCoord: f32,
                    Layer: root::gli::texture_size_type,
                    Level: f32,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler1darray_target_texture(
                    Sampler: *const root::gli::fsampler1DArray,
                ) -> *const root::gli::texture1d_array;
            }
            extern "C" {
                pub fn fsampler1darray_generate_mipmaps1(
                    Sampler: *mut root::gli::fsampler1DArray,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                pub fn fsampler1darray_generate_mipmaps2(
                    Sampler: *mut root::gli::fsampler1DArray,
                    BaseLayer: root::gli::texture_size_type,
                    MaxLayer: root::gli::texture_size_type,
                    BaseLevel: root::gli::texture_size_type,
                    MaxLevel: root::gli::texture_size_type,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_sampler1d_array(Sampler: *mut root::gli::fsampler1DArray);
            }
        }
        pub mod FSampler2D {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn fsampler2d_new(
                    Texture: *const root::gli::texture2d,
                    Wrap: root::gli::wrap,
                    Mip: root::gli::filter,
                    Min: root::gli::filter,
                ) -> root::gli::fsampler2D;
            }
            extern "C" {
                pub fn fsampler2d_set_border_color(
                    Sampler: *mut root::gli::fsampler2D,
                    BorderColor: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler2d_clear(
                    Sampler: *mut root::gli::fsampler2D,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler2d_texel_fetch(
                    Sampler: *const root::gli::fsampler2D,
                    TexelCoord: *const [u32; 2usize],
                    Level: root::gli::texture_size_type,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler2d_texel_write(
                    Sampler: *mut root::gli::fsampler2D,
                    TexelCoord: *const [u32; 2usize],
                    Level: root::gli::texture_size_type,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler2d_texel_lod(
                    Sampler: *const root::gli::fsampler2D,
                    SampleCoord: *const [f32; 2usize],
                    Level: f32,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler2d_target_texture(
                    Sampler: *const root::gli::fsampler2D,
                ) -> *const root::gli::texture2d;
            }
            extern "C" {
                pub fn fsampler2d_generate_mipmaps1(
                    Sampler: *mut root::gli::fsampler2D,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                pub fn fsampler2d_generate_mipmaps2(
                    Sampler: *mut root::gli::fsampler2D,
                    BaseLevel: root::gli::texture_size_type,
                    MaxLevel: root::gli::texture_size_type,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_sampler2d(Sampler: *mut root::gli::fsampler2D);
            }
        }
        pub mod FSampler2DArray {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn fsampler2darray_new(
                    Texture: *const root::gli::texture2d_array,
                    Wrap: root::gli::wrap,
                    Mip: root::gli::filter,
                    Min: root::gli::filter,
                ) -> root::gli::fsampler2DArray;
            }
            extern "C" {
                pub fn fsampler2darray_set_border_color(
                    Sampler: *mut root::gli::fsampler2DArray,
                    BorderColor: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler2darray_clear(
                    Sampler: *mut root::gli::fsampler2DArray,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler2darray_texel_fetch(
                    Sampler: *const root::gli::fsampler2DArray,
                    TexelCoord: *const [u32; 2usize],
                    Layer: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler2darray_texel_write(
                    Sampler: *mut root::gli::fsampler2DArray,
                    TexelCoord: *const [u32; 2usize],
                    Layer: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler2darray_texel_lod(
                    Sampler: *const root::gli::fsampler2DArray,
                    SampleCoord: *const [f32; 2usize],
                    Layer: root::gli::texture_size_type,
                    Level: f32,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler2darray_target_texture(
                    Sampler: *const root::gli::fsampler2DArray,
                ) -> *const root::gli::texture2d_array;
            }
            extern "C" {
                pub fn fsampler2darray_generate_mipmaps1(
                    Sampler: *mut root::gli::fsampler2DArray,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                pub fn fsampler2darray_generate_mipmaps2(
                    Sampler: *mut root::gli::fsampler2DArray,
                    BaseLayer: root::gli::texture_size_type,
                    MaxLayer: root::gli::texture_size_type,
                    BaseLevel: root::gli::texture_size_type,
                    MaxLevel: root::gli::texture_size_type,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_sampler2d_array(Sampler: *mut root::gli::fsampler2DArray);
            }
        }
        pub mod FSampler3D {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn fsampler3d_new(
                    Texture: *const root::gli::texture3d,
                    Wrap: root::gli::wrap,
                    Mip: root::gli::filter,
                    Min: root::gli::filter,
                ) -> root::gli::fsampler3D;
            }
            extern "C" {
                pub fn fsampler3d_set_border_color(
                    Sampler: *mut root::gli::fsampler3D,
                    BorderColor: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler3d_clear(
                    Sampler: *mut root::gli::fsampler3D,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler3d_texel_fetch(
                    Sampler: *const root::gli::fsampler3D,
                    TexelCoord: *const [u32; 3usize],
                    Level: root::gli::texture_size_type,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler3d_texel_write(
                    Sampler: *mut root::gli::fsampler3D,
                    TexelCoord: *const [u32; 3usize],
                    Level: root::gli::texture_size_type,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler3d_texel_lod(
                    Sampler: *const root::gli::fsampler3D,
                    SampleCoord: *const [f32; 3usize],
                    Level: f32,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler3d_target_texture(
                    Sampler: *const root::gli::fsampler3D,
                ) -> *const root::gli::texture3d;
            }
            extern "C" {
                pub fn fsampler3d_generate_mipmaps1(
                    Sampler: *mut root::gli::fsampler3D,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                pub fn fsampler3d_generate_mipmaps3(
                    Sampler: *mut root::gli::fsampler3D,
                    BaseLevel: root::gli::texture_size_type,
                    MaxLevel: root::gli::texture_size_type,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_sampler3d(Sampler: *mut root::gli::fsampler3D);
            }
        }
        pub mod FSamplerCube {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn fsampler_cube_new(
                    Texture: *const root::gli::texture_cube,
                    Wrap: root::gli::wrap,
                    Mip: root::gli::filter,
                    Min: root::gli::filter,
                ) -> root::gli::fsamplerCube;
            }
            extern "C" {
                pub fn fsampler_cube_set_border_color(
                    Sampler: *mut root::gli::fsamplerCube,
                    BorderColor: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler_cube_clear(
                    Sampler: *mut root::gli::fsamplerCube,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler_cube_texel_fetch(
                    Sampler: *const root::gli::fsamplerCube,
                    TexelCoord: *const [u32; 2usize],
                    Face: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler_cube_texel_write(
                    Sampler: *mut root::gli::fsamplerCube,
                    TexelCoord: *const [u32; 2usize],
                    Face: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler_cube_texel_lod(
                    Sampler: *const root::gli::fsamplerCube,
                    SampleCoord: *const [f32; 2usize],
                    Face: root::gli::texture_size_type,
                    Level: f32,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler_cube_target_texture(
                    Sampler: *const root::gli::fsamplerCube,
                ) -> *const root::gli::texture_cube;
            }
            extern "C" {
                pub fn fsampler_cube_generate_mipmaps1(
                    Sampler: *mut root::gli::fsamplerCube,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                pub fn fsampler_cube_generate_mipmaps2(
                    Sampler: *mut root::gli::fsamplerCube,
                    BaseFace: root::gli::texture_size_type,
                    MaxFace: root::gli::texture_size_type,
                    BaseLevel: root::gli::texture_size_type,
                    MaxLevel: root::gli::texture_size_type,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_sampler_cube(Sampler: *mut root::gli::fsamplerCube);
            }
        }
        pub mod FSamplerCubeArray {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                pub fn fsampler_cube_array_new(
                    Texture: *const root::gli::texture_cube_array,
                    Wrap: root::gli::wrap,
                    Mip: root::gli::filter,
                    Min: root::gli::filter,
                ) -> root::gli::fsamplerCubeArray;
            }
            extern "C" {
                pub fn fsampler_cube_array_set_border_color(
                    Sampler: *mut root::gli::fsamplerCubeArray,
                    BorderColor: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler_cube_array_clear(
                    Sampler: *mut root::gli::fsamplerCubeArray,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler_cube_array_texel_fetch(
                    Sampler: *const root::gli::fsamplerCubeArray,
                    TexelCoord: *const [u32; 2usize],
                    Layer: root::gli::texture_size_type,
                    Face: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler_cube_array_texel_write(
                    Sampler: *mut root::gli::fsamplerCubeArray,
                    TexelCoord: *const [u32; 2usize],
                    Layer: root::gli::texture_size_type,
                    Face: root::gli::texture_size_type,
                    Level: root::gli::texture_size_type,
                    Texel: root::bindings::TexelType4F,
                );
            }
            extern "C" {
                pub fn fsampler_cube_array_texel_lod(
                    Sampler: *const root::gli::fsamplerCubeArray,
                    SampleCoord: *const [f32; 2usize],
                    Layer: root::gli::texture_size_type,
                    Face: root::gli::texture_size_type,
                    Level: f32,
                ) -> root::bindings::TexelType4F;
            }
            extern "C" {
                pub fn fsampler_cube_array_target_texture(
                    Sampler: *const root::gli::fsamplerCubeArray,
                ) -> *const root::gli::texture_cube_array;
            }
            extern "C" {
                pub fn fsampler_cube_array_generate_mipmaps1(
                    Sampler: *mut root::gli::fsamplerCubeArray,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                pub fn fsampler_cube_array_generate_mipmaps2(
                    Sampler: *mut root::gli::fsamplerCubeArray,
                    BaseLayer: root::gli::texture_size_type,
                    MaxLayer: root::gli::texture_size_type,
                    BaseFace: root::gli::texture_size_type,
                    MaxFace: root::gli::texture_size_type,
                    BaseLevel: root::gli::texture_size_type,
                    MaxLevel: root::gli::texture_size_type,
                    Minification: root::gli::filter,
                );
            }
            extern "C" {
                #[doc = " Manually Call destructor for image object. Helper function used in FFI."]
                pub fn destroy_sampler_cube_array(Sampler: *mut root::gli::fsamplerCubeArray);
            }
        }
    }
}
